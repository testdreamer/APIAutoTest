#-- coding: utf-8 --#@Time : 2022/6/1 16:55#@Author : tianxh#@Email : tianxh@casking.com.cn#@File : test_udaam_applicationroles.py#@Software: PyCharmfrom Utils.page import *from Utils.dicttogetparameter import *from Basepage.unittestChushihua import TestApifrom Utils.operationyaml import *from Utils.operationini import Conffrom Utils.operationini import *from Utils.log import *import jsonfrom Utils.send_email import *from Utils.all_style_template import *from Utils.operation_zentao_mysql import *from Utils.encrypt import *from Utils.currenttime import *import sys,ossys.path.append((os.path.abspath(os.path.join(os.path.dirname(__file__), '../'))))class ApplicationRoles(TestApi,Helper):    # 获取服务器地址,,,    url = read_yaml(sys.path[-1] + '/data/server_address.yaml', 'url')    case_paramt_ini = sys.path[-1] + '/data/case_parameters.ini'    cf = Conf    '''    查询应用列表,正确    '''    def test_query_app_list(self):        token_yaml = sys.path[-1] + '/a_udaam/data/token.yaml'        token = read_yaml(token_yaml, 'token')        # 获取ini中用例        data = self.cf.getini_by_section(self.case_paramt_ini, '查询应用列表,正确')        get_parameter = dict_to_get_parameter(data)        url = 'http://' + self.url + '/sys/applicationRole/page/findList?' + get_parameter        headers = {            'Authorization': 'Bearer '+token}        r = self.get(url,headers)        log.info(r.text)        res = r.json()['code'] == 200        case_section = '查询应用列表,正确'        url_path = '/sys/applicationRole/page/findList'        mail_title_url = 'http://' + self.url + url_path        request_method = 'get'        print(result_buginfo_template(case_section, url, request_method, data, r))        title = mail_buginfo_template(case_section, mail_title_url, request_method, data, r)[0]        content = mail_buginfo_template(case_section, mail_title_url, request_method, data, r)[1]        bug_to_zentao(res, title, content.replace('\'','').replace('"',''), 'zhaop', 'xiaojc')        bug_id = from_zentaotitle_get_zentaoid(title)        title_mail = 'BUG #' + str(bug_id) + ' ' + title        mail_temp = bug_mail_template(str(bug_id), title, content,                                      ['code='+str(r.json()['code'])], ['code=200'],                                      new_time().split(' ')[0], new_time().split(' ')[1], '禅道管理')        if res == False:            send_email('liny@casking.com.cn', title_mail, mail_temp)        self.assertEqual(r.json()['code'], 200)        self.assertEqual(r.json()['message'], '成功')        # sources = []        # for i in range(len(r.json()['data'])):        #     sources.append(r.json()['data'][i]['name'])        # self.assertTrue(        #     '测试另起三应用' in sources and        #     '测试第三方应用授权1' in sources and        #     '测试第三方应用授权2' in sources        # )        log.info('查询应用列表,正确')        time.sleep(1)    '''    应用角色-按系统查询角色,正确    '''    def test_query_role_by_system(self):        token_yaml = sys.path[-1] + '/a_udaam/data/token.yaml'        token = read_yaml(token_yaml, 'token')        # 获取ini中用例        data = self.cf.getini_by_section(self.case_paramt_ini, '应用角色-按系统查询角色,正确')        get_parameter = dict_to_get_parameter(data)        url = 'http://' + self.url + '/sys/applicationRole/page/findAllRoleBySystem?' + get_parameter        headers = {            'Authorization': 'Bearer ' + token}        r = self.get(url, headers)        log.info(r.text)        res = r.json()['code'] == 200        case_section = '应用角色-按系统查询角色,正确'        url_path = '/sys/applicationRole/page/findAllRoleBySystem'        mail_title_url = 'http://' + self.url + url_path        request_method = 'get'        print(result_buginfo_template(case_section, url, request_method, data, r))        title = mail_buginfo_template(case_section, mail_title_url, request_method, data, r)[0]        content = mail_buginfo_template(case_section, mail_title_url, request_method, data, r)[1]        bug_to_zentao(res, title, content.replace('\'','').replace('"',''), 'zhaop', 'xiaojc')        bug_id = from_zentaotitle_get_zentaoid(title)        title_mail = 'BUG #' + str(bug_id) + ' ' + title        mail_temp = bug_mail_template(str(bug_id), title, content,                                      ['code='+str(r.json()['code'])], ['code=200'],                                      new_time().split(' ')[0], new_time().split(' ')[1], '禅道管理')        if res == False:            send_email('liny@casking.com.cn', title_mail, mail_temp)        self.assertEqual(r.json()['code'], 200)        self.assertEqual(r.json()['message'], '成功')        log.info('应用角色-按系统查询角色,正确')        time.sleep(1)    '''        应用角色权限：条件查询系统下所有资源权限,正确    '''    def test_arpcqpoars(self):        token_yaml = sys.path[-1] + '/a_udaam/data/token.yaml'        token = read_yaml(token_yaml, 'token')        # 获取ini中用例        data = self.cf.getini_by_section(self.case_paramt_ini, '应用角色权限：条件查询系统下所有资源权限,正确')        get_parameter = dict_to_get_parameter(data)        url = 'http://' + self.url + '/sys/applicationRole/page/findPermissionList?' + get_parameter        headers = {            'Authorization': 'Bearer ' + token}        r = self.get(url, headers)        log.info(r.text)        if self.url == '192.168.13.159:10041':            self.assertEqual(r.json()['status'], 200)            self.assertEqual(r.json()['message'], '成功')        else:            res = r.json()['code'] == 200 and r.json()['data'][0]['name'] ==  '百度'            case_section = '应用角色权限：条件查询系统下所有资源权限,正确'            url_path = '/sys/applicationRole/page/findPermissionList'            mail_title_url = 'http://' + self.url + url_path            request_method = 'get'            print(result_buginfo_template(case_section, url, request_method, data, r))            title = mail_buginfo_template(case_section, mail_title_url, request_method, data, r)[0]            content = mail_buginfo_template(case_section, mail_title_url, request_method, data, r)[1]            bug_to_zentao(res, title, content.replace('\'','').replace('"',''), 'zhaop', 'xiaojc')            bug_id = from_zentaotitle_get_zentaoid(title)            title_mail = 'BUG #' + str(bug_id) + ' ' + title            mail_temp = bug_mail_template(str(bug_id), title, content,                                          ['code='+str(r.json()['code']),r.json()['data'][0]['name']], ['code=200','百度'],                                          new_time().split(' ')[0], new_time().split(' ')[1], '禅道管理')            if res == False:                send_email('liny@casking.com.cn', title_mail, mail_temp)            self.assertEqual(r.json()['status'], 200)            self.assertEqual(r.json()['message'], '成功')            self.assertTrue(res)        log.info('应用角色权限：条件查询系统下所有资源权限,正确')        time.sleep(1)    '''            应用角色权限：查询系统下角色的资源权限,正确    '''    def test_arpqrprs(self):        token_yaml = sys.path[-1] + '/a_udaam/data/token.yaml'        token = read_yaml(token_yaml, 'token')        # 获取ini中用例        data = self.cf.getini_by_section(self.case_paramt_ini, '应用角色权限：查询系统下角色的资源权限,正确')        get_parameter = dict_to_get_parameter(data)        url = 'http://' + self.url + '/sys/applicationRole/page/findPermissionListByRole?' + get_parameter        headers = {            'Authorization': 'Bearer ' + token}        r = self.get(url, headers)        log.info(r.text)        if self.url == '192.168.13.159:10041':            self.assertEqual(r.json()['status'], 200)            self.assertEqual(r.json()['message'], '成功')        else:            res = r.json()['code'] == 200 and r.json()['data'][0] == 'f4cde55f4caa153a781efa53f19ec123'            case_section = '应用角色权限：查询系统下角色的资源权限,正确'            url_path = '/sys/applicationRole/page/findPermissionListByRole'            mail_title_url = 'http://' + self.url + url_path            request_method = 'get'            print(result_buginfo_template(case_section, url, request_method, data, r))            title = mail_buginfo_template(case_section, mail_title_url, request_method, data, r)[0]            content = mail_buginfo_template(case_section, mail_title_url, request_method, data, r)[1]            bug_to_zentao(res, title, content.replace('\'','').replace('"',''), 'zhaop', 'xiaojc')            bug_id = from_zentaotitle_get_zentaoid(title)            title_mail = 'BUG #' + str(bug_id) + ' ' + title            mail_temp = bug_mail_template(str(bug_id), title, content,                                          ['code='+str(r.json()['code']), r.json()['data'][0]], ['code=200', 'f4cde55f4caa153a781efa53f19ec123'],                                          new_time().split(' ')[0], new_time().split(' ')[1], '禅道管理')            if res == False:                send_email('liny@casking.com.cn', title_mail, mail_temp)            self.assertEqual(r.json()['status'], 200)            self.assertEqual(r.json()['message'], '成功')            self.assertTrue(res)        log.info('应用角色权限：查询系统下角色的资源权限,正确')        time.sleep(1)    '''                角色批量授权,正确    '''    def test_batch_role_auth_orization(self):        token_yaml = sys.path[-1] + '/a_udaam/data/token.yaml'        token = read_yaml(token_yaml, 'token')        # 获取ini中用例        data1 = self.cf.getini_by_section(self.case_paramt_ini, '角色批量授权,正确')        #因为参数中有dict类型的参数,所有要进行参数格式转换        data2 = str(data1).replace("'[","[").replace("]'","]").replace("'","\"")        data3 = json.dumps(json.loads(data2))        url = 'http://' + self.url + '/sys/applicationRole/page/app/addBatch'        data = data3        headers = {            'Content-Type': 'application/json',            'Authorization': 'Bearer ' + token        }        r = self.post(url, data,headers)        log.info(r.text)        self.assertEqual(r.json()['status'], 200)        self.assertEqual(r.json()['message'], '成功')        log.info('角色批量授权,正确')        # 调用接口进行验证        get_parameter = dict_to_get_parameter(data1).split('&permissionId=')[0]        url1 = 'http://' + self.url + '/sys/applicationRole/page/findPermissionListByRole?'+get_parameter        r1 = self.get(url1, headers)        #把从ini文获取的参数提取list部分        expected_parameters = str(data1).replace("'[", "[").replace("]'", "]").split("permissionId':")[1][:-1]        res = r.json()['code'] == 200 and len(r1.json()['data']) == len(json.loads(expected_parameters))        case_section = '角色批量授权,正确'        url_path = '/sys/applicationRole/page/app/addBatch'        mail_title_url = 'http://' + self.url + url_path        request_method = 'post'        print(result_buginfo_template(case_section, url, request_method, data3, r))        title = mail_buginfo_template(case_section, mail_title_url, request_method, data3, r)[0]        content = mail_buginfo_template(case_section, mail_title_url, request_method, data3, r)[1]        bug_to_zentao(res, title, content.replace('\'','').replace('"',''), 'zhaop', 'xiaojc')        bug_id = from_zentaotitle_get_zentaoid(title)        title_mail = 'BUG #' + str(bug_id) + ' ' + title        mail_temp = bug_mail_template(str(bug_id), title, content,                                      ['code='+str(r.json()['code']),len(r1.json()['data'])],                                      ['code=200',len(json.loads(expected_parameters))],                                      new_time().split(' ')[0], new_time().split(' ')[1], '禅道管理')        if res == False:            send_email('liny@casking.com.cn', title_mail, mail_temp)        self.assertEqual(r.json()['status'], 200)        self.assertEqual(r.json()['message'], '成功')        # 检查实际的权限角色和传入的权限角色个数是否相等        self.assertTrue(len(r1.json()['data']) == len(json.loads(expected_parameters)))        #检查实际结果中的权限角色是否包含传入的权限角色        for i in range(len(r1.json()['data'])):            self.assertTrue(r1.json()['data'][i] in json.loads(expected_parameters))        time.sleep(1)    '''                2022-08-12新增                应用列表,正确        '''    def test_app_list(self):        token_yaml = sys.path[-1] + '/a_udaam/data/token.yaml'        token = read_yaml(token_yaml, 'token')        # 获取ini中用例        data = self.cf.getini_by_section(self.case_paramt_ini, '应用列表,正确')        get_parameter = dict_to_get_parameter(data)        url = 'http://' + self.url + '/sys/appInfo/list?' + get_parameter        headers = {            'Authorization': 'Bearer ' + token}        r = self.get(url, headers)        log.info(r.text)        if self.url == '192.168.13.159:10041':            sources = []            for i in range(len(r.json()['data']['content'])):                sources.append(r.json()['data']['content'][i]['name'])            print(sources)            result = ('孕产妇0820' in sources and                      '孕产妇0822' in sources and                      '健教082701' in sources                      )            self.assertEqual(r.json()['status'], 200)            self.assertEqual(r.json()['message'], '成功')            self.assertTrue(result)        else:            sources = []            for i in range(len(r.json()['data']['content'])):                sources.append(r.json()['data']['content'][i]['name'])            print(sources)            result = ('健教825' in sources and                      '健教处方824' in sources and                      '患者360' in sources                      )            res = r.json()['code'] == 200            case_section = '应用列表,正确'            url_path = '/sys/appInfo/list'            mail_title_url = 'http://' + self.url + url_path            request_method = 'get'            print(result_buginfo_template(case_section, url, request_method, data, r))            title = mail_buginfo_template(case_section, mail_title_url, request_method, data, r)[0]            content = mail_buginfo_template(case_section, mail_title_url, request_method, data, r)[1]            bug_to_zentao(res, title, content.replace('\'','').replace('"',''), 'zhaop', 'xiaojc')            bug_id = from_zentaotitle_get_zentaoid(title)            title_mail = 'BUG #' + str(bug_id) + ' ' + title            mail_temp = bug_mail_template(str(bug_id), title, content,                                          ['code='+str(r.json()['code'])],                                          ['code=200'],                                          new_time().split(' ')[0], new_time().split(' ')[1], '禅道管理')            if res == False:                send_email('liny@casking.com.cn', title_mail, mail_temp)            self.assertEqual(r.json()['message'], '成功')            self.assertTrue(res)            # self.assertTrue(result)        log.info('应用列表,正确')        time.sleep(1)