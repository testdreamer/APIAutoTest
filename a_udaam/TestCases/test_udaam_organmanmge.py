#-- coding: utf-8 --#@Time : 2022/6/14 20:03#@Author : tianxh#@Email : tianxh@casking.com.cn#@File : test_udaam_organmanmge.py#@Software: PyCharmfrom Utils.page import *from Utils.dicttogetparameter import *from Basepage.unittestChushihua import TestApifrom Utils.operationyaml import *from Utils.operationini import Conffrom Utils.operationini import *from Utils.log import *from Utils.send_email import *from Utils.operation_zentao_mysql import *from Utils.create_random import *import jsonfrom Utils.encrypt import *from Utils.currenttime import *from Utils.all_style_template import *import sys,ossys.path.append((os.path.abspath(os.path.join(os.path.dirname(__file__), '../'))))class OrgManagement(TestApi,Helper):    # 获取服务器地址,,,    url = read_yaml(sys.path[-1] + '/data/server_address.yaml', 'url')    case_paramt_ini = sys.path[-1] + '/data/case_parameters.ini'    cf = Conf    '''            新增机构,正确            '''    def test_insert_org(self):        token_yaml = sys.path[-1] + '/a_udaam/data/token.yaml'        token = read_yaml(token_yaml, 'token')        self.cf.put_ini(self.case_paramt_ini, '新增机构,正确', 'name', create_chinese(5))        self.cf.put_ini(self.case_paramt_ini, '新增机构,正确', 'code', str(get_time()))        # 获取ini中用例        data = self.cf.getini_by_section(self.case_paramt_ini, '新增机构,正确')        data1 = json.dumps(json.loads(str(data).replace("'", "\"").replace('"null"', 'null').replace('"true"', 'true')))        get_parameter = dict_to_get_parameter(data)        url = 'http://' + self.url + '/sys/org/page/list/add'        headers = {            'Content-Type': 'application/json',            'Authorization': 'Bearer ' + token        }        r = self.post(url,data1, headers)        log.info(r.text)        res = r.json()['code'] == 200        case_section = '新增机构,正确'        url_path = '/sys/org/page/list/add'        mail_title_url = 'http://' + self.url + url_path        request_method = 'post'        print(result_buginfo_template(case_section, url, request_method, data, r))        title = mail_buginfo_template(case_section, mail_title_url, request_method, data, r)[0]        content = mail_buginfo_template(case_section, mail_title_url, request_method, data, r)[1]        bug_to_zentao(res, title, content.replace('\'','').replace('"',''), 'zhaop', 'xiaojc')        bug_id = from_zentaotitle_get_zentaoid(title)        title_mail = 'BUG #' + str(bug_id) + ' ' + title        mail_temp = bug_mail_template(str(bug_id), title, content,                                      ['code=' + str(r.json()['code'])],                                      ['code=200'],                                      new_time().split(' ')[0], new_time().split(' ')[1], '禅道管理')        if res == False:            send_email('liny@casking.com.cn', title_mail, mail_temp)        self.assertEqual(r.json()['code'], 200)        self.assertEqual(r.json()['message'], '成功')        log.info('新增机构,正确')        time.sleep(1)    '''                    机构树查询,正确                    '''    def test_query_org_tree(self):        token_yaml = sys.path[-1] + '/a_udaam/data/token.yaml'        token = read_yaml(token_yaml, 'token')        # 获取ini中用例        data = self.cf.getini_by_section(self.case_paramt_ini, '机构树查询,正确')        data1 = json.dumps(json.loads(str(data).replace("'", "\"").replace('"null"', 'null').replace('"true"', 'true')))        get_parameter = dict_to_get_parameter(data)        url = 'http://' + self.url + '/sys/org/page/loadUserOrg?' + get_parameter        headers = {            'Content-Type': 'application/json',            'Authorization': 'Bearer ' + token        }        r = self.get(url, headers)        log.info(r.text)        sources = []        for i in range(len(r.json()['data'])):            sources.append(r.json()['data'][i]['name'])        res = r.json()['code'] == 200 and '测试机构auto' in sources        case_section = '机构树查询,正确'        url_path = '/sys/org/page/loadUserOrg'        mail_title_url = 'http://' + self.url + url_path        request_method = 'get'        print(result_buginfo_template(case_section, url, request_method, data, r))        title = mail_buginfo_template(case_section, mail_title_url, request_method, data, r)[0]        content = mail_buginfo_template(case_section, mail_title_url, request_method, data, r)[1]        bug_to_zentao(res, title, content.replace('\'','').replace('"',''), 'zhaop', 'xiaojc')        bug_id = from_zentaotitle_get_zentaoid(title)        title_mail = 'BUG #' + str(bug_id) + ' ' + title        mail_temp = bug_mail_template(str(bug_id), title, content,                                      ['code=' + str(r.json()['code']),sources],                                      ['code=200',['测试机构auto']],                                      new_time().split(' ')[0], new_time().split(' ')[1], '禅道管理')        if res == False:            send_email('liny@casking.com.cn', title_mail, mail_temp)        self.assertEqual(r.json()['code'], 200)        self.assertEqual(r.json()['message'], '成功')        self.assertTrue( '测试机构auto' in sources)        if '测试机构auto' in sources:            self.cf.put_ini(self.case_paramt_ini,'查询机构列表-按用户名,正确','name','测试机构auto')        log.info('机构树查询,正确')        time.sleep(1)    '''            查询机构列表-按用户名,正确    '''    def test_query_org_list(self):        token_yaml = sys.path[-1] + '/a_udaam/data/token.yaml'        token = read_yaml(token_yaml, 'token')        #获取[新增机构,正确]name写到[查询机构列表-按用户名,正确]name中        insert_org_name = self.cf.getini_by_option(self.case_paramt_ini, '新增机构,正确','name')        self.cf.put_ini(self.case_paramt_ini, '查询机构列表-按用户名,正确','name',insert_org_name)        # 获取ini中用例        data = self.cf.getini_by_section(self.case_paramt_ini, '查询机构列表-按用户名,正确')        data1 = json.dumps(json.loads(str(data).replace("'", "\"").replace('"null"', 'null').replace('"true"', 'true')))        get_parameter = dict_to_get_parameter(data)        url = 'http://' + self.url + '/sys/org/page/list?' + get_parameter        headers = {            'Content-Type': 'application/json',            'Authorization': 'Bearer ' + token        }        r = self.get(url, headers)        log.info(r.text)        # 获取[新增机构,正确]的name,region值进行校验        insertorg_name = self.cf.getini_by_option(self.case_paramt_ini, '新增机构,正确', 'name')        insertorg_region = self.cf.getini_by_option(self.case_paramt_ini, '新增机构,正确', 'region')        res = r.json()['code'] == 200 and r.json()['data']['content'][0]['name'] == insertorg_name and r.json()['data']['content'][0]['region'] == insertorg_region        case_section = '查询机构列表-按用户名,正确'        url_path = '/sys/org/page/list'        mail_title_url = 'http://' + self.url + url_path        request_method = 'get'        print(result_buginfo_template(case_section, url, request_method, data, r))        title = mail_buginfo_template(case_section, mail_title_url, request_method, data, r)[0]        content = mail_buginfo_template(case_section, mail_title_url, request_method, data, r)[1]        bug_to_zentao(res, title, content.replace('\'','').replace('"',''), 'zhaop', 'xiaojc')        bug_id = from_zentaotitle_get_zentaoid(title)        title_mail = 'BUG #' + str(bug_id) + ' ' + title        mail_temp = bug_mail_template(str(bug_id), title, content,                                      ['code=' + str(r.json()['code']), r.json()['data']['content'][0]['name'],r.json()['data']['content'][0]['region']],                                      ['code=200', insertorg_name,insertorg_name],                                      new_time().split(' ')[0], new_time().split(' ')[1], '禅道管理')        if res == False:            send_email('liny@casking.com.cn', title_mail, mail_temp)        self.assertEqual(r.json()['code'], 200)        self.assertEqual(r.json()['message'], '成功')        self.assertEqual(r.json()['data']['content'][0]['name'],insertorg_name)        self.assertEqual(r.json()['data']['content'][0]['region'], insertorg_region)        #将id写到[机构禁用,正确]的id中        self.cf.put_ini(self.case_paramt_ini,'机构禁用,正确','id',r.json()['data']['content'][0]['id'])        # 将id写到[机构启用,正确]的id中        self.cf.put_ini(self.case_paramt_ini, '机构启用,正确', 'id', r.json()['data']['content'][0]['id'])        # 将id写到[删除机构,正确]的id中        self.cf.put_ini(self.case_paramt_ini, '删除机构,正确', 'id', r.json()['data']['content'][0]['id'])        log.info('查询机构列表-按用户名,正确')        time.sleep(1)    '''                机构禁用,正确        '''    def test_org_close(self):        token_yaml = sys.path[-1] + '/a_udaam/data/token.yaml'        token = read_yaml(token_yaml, 'token')        # 获取ini中用例        data = self.cf.getini_by_section(self.case_paramt_ini, '机构禁用,正确')        # data1 = json.dumps(json.loads(str(data).replace("'", "\"").replace('"null"', 'null').replace('"true"', 'true').replace('"false"', 'false')))        data1 = {}        get_parameter = dict_to_get_parameter(data)        url = 'http://' + self.url + '/sys/org/page/list/updateOrgEnabled?'+get_parameter        headers = {            'Content-Type': 'application/json',            'Authorization': 'Bearer ' + token        }        r = self.post(url, data1,headers)        log.info(r.text)        #访问 查询机构列表接口获取enabled值进行校验        data2 = self.cf.getini_by_section(self.case_paramt_ini, '查询机构列表-按用户名,正确')        get_parameter1 = dict_to_get_parameter(data2)        url1 = 'http://' + self.url + '/sys/org/page/list?' + get_parameter1        headers1 = {            'Content-Type': 'application/json',            'Authorization': 'Bearer ' + token        }        r1 = self.get(url1, headers1)        log.info(r1.text)        org_opcl_enabled = self.cf.getini_by_option(self.case_paramt_ini,'机构禁用,正确','enabled')        res = r.json()['code'] == 200 and str(r1.json()['data']['content'][0]['enabled']).lower()==org_opcl_enabled        case_section = '机构禁用,正确'        url_path = '/sys/org/page/list/updateOrgEnabled'        mail_title_url = 'http://' + self.url + url_path        request_method = 'post'        print(result_buginfo_template(case_section, url, request_method, data, r))        title = mail_buginfo_template(case_section, mail_title_url, request_method, data, r)[0]        content = mail_buginfo_template(case_section, mail_title_url, request_method, data, r)[1]        bug_to_zentao(res, title, content.replace('\'','').replace('"',''), 'zhaop', 'xiaojc')        bug_id = from_zentaotitle_get_zentaoid(title)        title_mail = 'BUG #' + str(bug_id) + ' ' + title        mail_temp = bug_mail_template(str(bug_id), title, content,                                      ['code=' + str(r.json()['code']), str(r1.json()['data']['content'][0]['enabled']).lower()],                                      ['code=200', org_opcl_enabled],                                      new_time().split(' ')[0], new_time().split(' ')[1], '禅道管理')        if res == False:            send_email('liny@casking.com.cn', title_mail, mail_temp)        self.assertEqual(r.json()['code'], 200)        self.assertEqual(r.json()['message'], '成功')        self.assertEqual(str(r1.json()['data']['content'][0]['enabled']).lower(),org_opcl_enabled)        log.info('机构禁用,正确')        time.sleep(1)    '''                    机构启用,正确            '''    def test_org_open(self):        token_yaml = sys.path[-1] + '/a_udaam/data/token.yaml'        token = read_yaml(token_yaml, 'token')        # 获取ini中用例        data = self.cf.getini_by_section(self.case_paramt_ini, '机构启用,正确')        # data1 = json.dumps(json.loads(str(data).replace("'", "\"").replace('"null"', 'null').replace('"true"', 'true').replace('"false"', 'false')))        data1 = {}        get_parameter = dict_to_get_parameter(data)        url = 'http://' + self.url + '/sys/org/page/list/updateOrgEnabled?' + get_parameter        headers = {            'Content-Type': 'application/json',            'Authorization': 'Bearer ' + token        }        r = self.post(url, data1, headers)        log.info(r.text)        # 访问 查询机构列表接口获取enabled值进行校验        data2 = self.cf.getini_by_section(self.case_paramt_ini, '查询机构列表-按用户名,正确')        get_parameter1 = dict_to_get_parameter(data2)        url1 = 'http://' + self.url + '/sys/org/page/list?' + get_parameter1        headers1 = {            'Content-Type': 'application/json',            'Authorization': 'Bearer ' + token        }        r1 = self.get(url1, headers1)        log.info(r1.text)        org_opcl_enabled = self.cf.getini_by_option(self.case_paramt_ini, '机构启用,正确', 'enabled')        res = r.json()['code'] == 200 and str(r1.json()['data']['content'][0]['enabled']).lower() == org_opcl_enabled        case_section = '机构启用,正确'        url_path = '/sys/org/page/list/updateOrgEnabled'        mail_title_url = 'http://' + self.url + url_path        request_method = 'post'        print(result_buginfo_template(case_section, url, request_method, data, r))        title = mail_buginfo_template(case_section, mail_title_url, request_method, data, r)[0]        content = mail_buginfo_template(case_section, mail_title_url, request_method, data, r)[1]        bug_to_zentao(res, title, content.replace('\'','').replace('"',''), 'zhaop', 'xiaojc')        bug_id = from_zentaotitle_get_zentaoid(title)        title_mail = 'BUG #' + str(bug_id) + ' ' + title        mail_temp = bug_mail_template(str(bug_id), title, content,                                      ['code=' + str(r.json()['code']),                                       str(r1.json()['data']['content'][0]['enabled']).lower()],                                      ['code=200', org_opcl_enabled],                                      new_time().split(' ')[0], new_time().split(' ')[1], '禅道管理')        if res == False:            send_email('liny@casking.com.cn', title_mail, mail_temp)        self.assertEqual(r.json()['code'], 200)        self.assertEqual(r.json()['message'], '成功')        self.assertEqual(str(r1.json()['data']['content'][0]['enabled']).lower(), org_opcl_enabled)        log.info('机构启用,正确')        time.sleep(1)    '''            2022-08-12新增            单表详情,正确    '''    def test_order_details(self):        token_yaml = sys.path[-1] + '/a_udaam/data/token.yaml'        token = read_yaml(token_yaml, 'token')        # 获取ini中用例        data = self.cf.getini_by_section(self.case_paramt_ini, '单表详情,正确')        data1 = json.dumps(json.loads(str(data).replace("'", "\"").replace('"null"', 'null').replace('"true"', 'true')))        get_parameter = dict_to_get_parameter(data)        url = 'http://' + self.url + '/sys/org/page/list/detail/id?' + get_parameter        headers = {            'Content-Type': 'application/json',            'Authorization': 'Bearer ' + token        }        r = self.get(url, headers)        log.info(r.text)        res = r.json()['code'] == 200 and r.json()['data']['name'] == '技术研发中心'        case_section = '单表详情,正确'        url_path = '/sys/org/page/list/detail/id'        mail_title_url = 'http://' + self.url + url_path        request_method = 'get'        print(result_buginfo_template(case_section, url, request_method, data, r))        title = mail_buginfo_template(case_section, mail_title_url, request_method, data, r)[0]        content = mail_buginfo_template(case_section, mail_title_url, request_method, data, r)[1]        bug_to_zentao(res, title, content.replace('\'','').replace('"',''), 'zhaop', 'xiaojc')        bug_id = from_zentaotitle_get_zentaoid(title)        title_mail = 'BUG #' + str(bug_id) + ' ' + title        mail_temp = bug_mail_template(str(bug_id), title, content,                                      ['code=' + str(r.json()['code']),                                       r.json()['data']['name']],                                      ['code=200', '技术研发中心'],                                      new_time().split(' ')[0], new_time().split(' ')[1], '禅道管理')        if res == False:            send_email('liny@casking.com.cn', title_mail, mail_temp)        self.assertEqual(r.json()['code'], 200)        self.assertEqual(r.json()['message'], '成功')        self.assertEqual(r.json()['data']['name'], '技术研发中心')        log.info('单表详情,正确')        time.sleep(1)    '''                        删除机构,正确                '''    def test_delete_org(self):        token_yaml = sys.path[-1] + '/a_udaam/data/token.yaml'        token = read_yaml(token_yaml, 'token')        # 获取ini中用例        data = self.cf.getini_by_option(self.case_paramt_ini, '删除机构,正确','id')        url = 'http://' + self.url + '/sys/org/page/list/delete/' + data        headers = {            'Content-Type': 'application/json',            'Authorization': 'Bearer ' + token        }        r = self.post(url,{}, headers)        log.info(r.text)        res = r.json()['code'] == 200        case_section = '删除机构,正确'        url_path = '/sys/org/page/list/delete/'        mail_title_url = 'http://' + self.url + url_path        request_method = 'post'        print(result_buginfo_template(case_section, url, request_method, data, r))        title = mail_buginfo_template(case_section, mail_title_url, request_method, data, r)[0]        content = mail_buginfo_template(case_section, mail_title_url, request_method, data, r)[1]        bug_to_zentao(res, title, content.replace('\'','').replace('"',''), 'zhaop', 'xiaojc')        bug_id = from_zentaotitle_get_zentaoid(title)        title_mail = 'BUG #' + str(bug_id) + ' ' + title        mail_temp = bug_mail_template(str(bug_id), title, content,                                      ['code=' + str(r.json()['code'])],                                      ['code=200'],                                      new_time().split(' ')[0], new_time().split(' ')[1], '禅道管理')        if res == False:            send_email('liny@casking.com.cn', title_mail, mail_temp)        self.assertEqual(r.json()['code'], 200)        self.assertEqual(r.json()['message'], '成功')        log.info('删除机构,正确')        time.sleep(1)