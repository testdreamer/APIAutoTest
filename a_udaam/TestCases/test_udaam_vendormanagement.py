#-- coding: utf-8 --#@Time : 2022/6/10 17:35#@Author : tianxh#@Email : tianxh@casking.com.cn#@File : test_udaam_vendormanagement.py#@Software: PyCharmfrom Utils.page import *from Utils.dicttogetparameter import *from Basepage.unittestChushihua import TestApifrom Utils.operationyaml import *from Utils.operationini import Conffrom Utils.operationini import *from Utils.log import *from Utils.currenttime import *import jsonfrom Utils.send_email import *from Utils.operation_zentao_mysql import *from Utils.encrypt import *from Utils.currenttime import *from Utils.all_style_template import *import sys,ossys.path.append((os.path.abspath(os.path.join(os.path.dirname(__file__), '../'))))class VendorManagement(TestApi,Helper):    # 获取服务器地址,,,    url = read_yaml(sys.path[-1] + '/data/server_address.yaml', 'url')    case_paramt_ini = sys.path[-1] + '/data/case_parameters.ini'    cf = Conf    '''                2022-8-12新增                    查询所有厂商,正确            '''    def test_query_all_vendor(self):        token_yaml = sys.path[-1] + '/a_udaam/data/token.yaml'        token = read_yaml(token_yaml, 'token')        # 获取ini中用例        data = self.cf.getini_by_section(self.case_paramt_ini, '查询所有厂商,正确')        data1 = json.dumps(json.loads(            str(data).replace("'", "\"").replace('"null"', 'null').replace('"true"', 'true').replace('"false"',                                                                                                     'false')))        get_parameter = dict_to_get_parameter(data)        url = 'http://' + self.url + '/sys/threeAppInfo/findAllSupplier?' + get_parameter        headers = {            'Content-Type': 'application/json',            'Authorization': 'Bearer ' + token        }        r = self.get(url, headers)        log.info(r.text)        sources = []        for i in range(len(r.json()['data'])):            sources.append(r.json()['data'][i]['name'])        log.info(sources)        result = '深圳联影' in sources and '测试02' in sources and '联影' in sources        res = r.json()['code'] == 200        case_section = '查询所有厂商,正确'        url_path = '/sys/threeAppInfo/findAllSupplier'        mail_title_url = 'http://' + self.url + url_path        request_method = 'get'        print(result_buginfo_template(case_section, url, request_method, data1, r))        title = mail_buginfo_template(case_section, mail_title_url, request_method, data1, r)[0]        content = mail_buginfo_template(case_section, mail_title_url, request_method, data1, r)[1]        bug_to_zentao(res, title, content.replace('\'','').replace('"',''), 'zhaop', 'xiaojc')        bug_id = from_zentaotitle_get_zentaoid(title)        title_mail = 'BUG #' + str(bug_id) + ' ' + title        mail_temp = bug_mail_template(str(bug_id), title, content, ['code='+str(r.json()['code'])], ['code=200'],                                      new_time().split(' ')[0], new_time().split(' ')[1], '禅道管理')        if res == False:            send_email('liny@casking.com.cn', title_mail, mail_temp)        self.assertEqual(r.json()['code'], 200)        self.assertEqual(r.json()['message'], '成功')        log.info('查询第三方应用,正确')        time.sleep(1)    '''                    厂商新增,正确        '''    def test_new_vendors(self):        token_yaml = sys.path[-1] + '/a_udaam/data/token.yaml'        token = read_yaml(token_yaml, 'token')        #随机生成厂商name和code写到[厂商新增,正确]name和code中        self.cf.put_ini(self.case_paramt_ini, '厂商新增,正确','name',str(get_time()))        self.cf.put_ini(self.case_paramt_ini, '厂商新增,正确', 'code', str(get_time()))        # 获取ini中用例        data = self.cf.getini_by_section(self.case_paramt_ini, '厂商新增,正确')        data1 = json.dumps(json.loads(str(data).replace("'", "\"").replace('"null"', 'null').replace('"true"', 'true')))        get_parameter = dict_to_get_parameter(data)        url = 'http://' + self.url + '/sys/supplier/manage/add'        headers = {            'Content-Type': 'application/json',            'Authorization': 'Bearer ' + token        }        r = self.post(url, data1, headers)        log.info(r.text)        res = r.json()['code'] == 200        case_section = '厂商新增,正确'        url_path = '/sys/supplier/manage/add'        mail_title_url = 'http://' + self.url + url_path        request_method = 'post'        print(result_buginfo_template(case_section, url, request_method, data1, r))        title = mail_buginfo_template(case_section, mail_title_url, request_method, data1, r)[0]        content = mail_buginfo_template(case_section, mail_title_url, request_method, data1, r)[1]        bug_to_zentao(res, title, content.replace('\'','').replace('"',''), 'zhaop', 'xiaojc')        bug_id = from_zentaotitle_get_zentaoid(title)        title_mail = 'BUG #' + str(bug_id) + ' ' + title        mail_temp = bug_mail_template(str(bug_id), title, content, ['code='+str(r.json()['code'])], ['code=200'],                                      new_time().split(' ')[0], new_time().split(' ')[1], '禅道管理')        if res == False:            send_email('liny@casking.com.cn', title_mail, mail_temp)        self.assertEqual(r.json()['code'], 200)        self.assertEqual(r.json()['message'], '成功')        # 将新增厂商的id值添加到case_parameters.ini文件的[厂商修改,正确]的id        self.cf.put_ini(self.case_paramt_ini, '厂商修改,正确', 'id', r.json()['data'])        # 将新增厂商的id值添加到case_parameters.ini文件的[厂商禁用启用,正确]的id        self.cf.put_ini(self.case_paramt_ini, '厂商禁用启用,正确', 'id', r.json()['data'])        # 将新增厂商的id值添加到case_parameters.ini文件的[厂商删除,正确]的id        self.cf.put_ini(self.case_paramt_ini, '厂商删除,正确', 'id', r.json()['data'])        # 将新增厂商的id值添加到case_parameters.ini文件的[新增第三方应用,正确]的supplierId        self.cf.put_ini(self.case_paramt_ini, '新增第三方应用,正确', 'supplierId', r.json()['data'])        log.info('厂商新增,正确')        time.sleep(1)    '''            厂商列表,正确    '''    def test_vendor_list(self):        token_yaml = sys.path[-1] + '/a_udaam/data/token.yaml'        token = read_yaml(token_yaml, 'token')        # 获取当前时间        get_times = get_time()        dangqian_time = get_times        timeArray1 = time.localtime(dangqian_time / 1000)        checkpoint1 = time.strftime("%Y-%m-%d %H:%M:%S", timeArray1)        # 获取以后时间        yihou_time = get_times + 1000000000        timeArray2 = time.localtime(yihou_time / 1000)        checkpoint2 = time.strftime("%Y-%m-%d %H:%M:%S", timeArray2)        self.cf.put_ini(self.case_paramt_ini, '厂商新增,正确', 'startDateOfOperation', checkpoint1)        self.cf.put_ini(self.case_paramt_ini, '厂商新增,正确', 'endDateOfOperation', checkpoint2)        # 获取ini中用例        data = self.cf.getini_by_section(self.case_paramt_ini, '厂商列表,正确')        data1 = json.dumps(json.loads(str(data).replace("'","\"").replace('"null"','null').replace('"true"','true')))        get_parameter = dict_to_get_parameter(data)        url = 'http://' + self.url + '/sys/supplier/list?' + get_parameter        headers = {            'Content-Type': 'application/json',            'Authorization': 'Bearer ' + token        }        r = self.get(url, headers)        log.info(r.text)        # 验证新增的厂商        insert_vend_name = self.cf.getini_by_option(self.case_paramt_ini, '厂商新增,正确', 'name')        res = r.json()['code'] == 200 and r.json()['data']['content'][0]['name'] == insert_vend_name        case_section = '厂商列表,正确'        url_path = '/sys/supplier/list'        mail_title_url = 'http://' + self.url + url_path        request_method = 'get'        print(result_buginfo_template(case_section, url, request_method, data1, r))        title = mail_buginfo_template(case_section, mail_title_url, request_method, data1, r)[0]        content = mail_buginfo_template(case_section, mail_title_url, request_method, data1, r)[1]        bug_to_zentao(res, title, content.replace('\'','').replace('"',''), 'zhaop', 'xiaojc')        bug_id = from_zentaotitle_get_zentaoid(title)        title_mail = 'BUG #' + str(bug_id) + ' ' + title        mail_temp = bug_mail_template(str(bug_id), title, content, ['code='+str(r.json()['code']),r.json()['data']['content'][0]['name']], ['code=200',insert_vend_name],                                      new_time().split(' ')[0], new_time().split(' ')[1], '禅道管理')        if res == False:            send_email('liny@casking.com.cn', title_mail, mail_temp)        self.assertEqual(r.json()['code'], 200)        self.assertEqual(r.json()['message'], '成功')        self.assertTrue(res)        log.info('厂商列表,正确')        time.sleep(1)    '''                厂商修改,正确    '''    def test_update_vendor(self):        token_yaml = sys.path[-1] + '/a_udaam/data/token.yaml'        token = read_yaml(token_yaml, 'token')        # 获取新增时候的name,code,startDateOfOperation,endDateOfOperation的值        newvendors_name = self.cf.getini_by_option(self.case_paramt_ini, '厂商新增,正确', 'name')        newvendors_code = self.cf.getini_by_option(self.case_paramt_ini, '厂商新增,正确', 'code')        # 获取当前时间        get_times = get_time()        dangqian_time = get_times        timeArray1 = time.localtime(dangqian_time / 1000)        checkpoint1 = time.strftime("%Y-%m-%d %H:%M:%S", timeArray1)        # 获取以后时间        yihou_time = get_times + 1000000000        timeArray2 = time.localtime(yihou_time / 1000)        checkpoint2 = time.strftime("%Y-%m-%d %H:%M:%S", timeArray2)        # 将修改后的参数添加到ini文件的[厂商修改,正确]的参数中        self.cf.put_ini(self.case_paramt_ini, '厂商修改,正确', 'name', str(get_time()))        self.cf.put_ini(self.case_paramt_ini, '厂商修改,正确', 'code', str(get_time()))        self.cf.put_ini(self.case_paramt_ini, '厂商修改,正确', 'createTime', checkpoint1)        self.cf.put_ini(self.case_paramt_ini, '厂商修改,正确', 'startDateOfOperation', checkpoint1)        self.cf.put_ini(self.case_paramt_ini, '厂商修改,正确', 'endDateOfOperation', checkpoint2)        # 获取ini中用例        data = self.cf.getini_by_section(self.case_paramt_ini, '厂商修改,正确')        data1 = str(data).replace("'", "\"").replace('"null"', 'null').replace('"true"', 'true')        get_parameter = dict_to_get_parameter(data)        url = 'http://' + self.url + '/sys/supplier/manage/update'        headers = {            'Content-Type': 'application/json',            'Authorization': 'Bearer ' + token        }        r = self.post(url, data1, headers)        log.info(r.text)        res = r.json()['code'] == 200        case_section = '厂商修改,正确'        url_path = '/sys/supplier/manage/update'        mail_title_url = 'http://' + self.url + url_path        request_method = 'post'        print(result_buginfo_template(case_section, url, request_method, data1, r))        title = mail_buginfo_template(case_section, mail_title_url, request_method, data1, r)[0]        content = mail_buginfo_template(case_section, mail_title_url, request_method, data1, r)[1]        bug_to_zentao(res, title, content.replace('\'','').replace('"',''), 'zhaop', 'xiaojc')        bug_id = from_zentaotitle_get_zentaoid(title)        title_mail = 'BUG #' + str(bug_id) + ' ' + title        mail_temp = bug_mail_template(str(bug_id), title, content, ['code='+str(r.json()['code'])],                                      ['code=200'],                                      new_time().split(' ')[0], new_time().split(' ')[1], '禅道管理')        if res == False:            send_email('liny@casking.com.cn', title_mail, mail_temp)        self.assertEqual(r.json()['code'], 200)        self.assertEqual(r.json()['message'], '成功')        log.info('厂商修改,正确')        time.sleep(1)    '''                厂商禁用启用,正确    '''    def test_vendor_disable_enable(self):        token_yaml = sys.path[-1] + '/a_udaam/data/token.yaml'        token = read_yaml(token_yaml, 'token')        # 获取ini中用例        data = self.cf.getini_by_section(self.case_paramt_ini, '厂商禁用启用,正确')        get_parameter = dict_to_get_parameter(data)        data = str(data).replace("'", "\"").replace('"null"', 'null').replace('"true"', 'true')        url = 'http://' + self.url + '/sys/supplier/manage/updateEnabled?' + get_parameter        headers = {            'Content-Type': 'application/json',            'Authorization': 'Bearer ' + token        }        r = self.post(url, data, headers)        log.info(r.text)        res = r.json()['code'] == 200        case_section = '厂商禁用启用,正确'        url_path = '/sys/supplier/manage/updateEnabled'        mail_title_url = 'http://' + self.url + url_path        request_method = 'post'        print(result_buginfo_template(case_section, url, request_method, data, r))        title = mail_buginfo_template(case_section, mail_title_url, request_method, data, r)[0]        content = mail_buginfo_template(case_section, mail_title_url, request_method, data, r)[1]        bug_to_zentao(res, title, content.replace('\'','').replace('"',''), 'zhaop', 'xiaojc')        bug_id = from_zentaotitle_get_zentaoid(title)        title_mail = 'BUG #' + str(bug_id) + ' ' + title        mail_temp = bug_mail_template(str(bug_id), title, content, ['code='+str(r.json()['code'])],                                      ['code=200'],                                      new_time().split(' ')[0], new_time().split(' ')[1], '禅道管理')        if res == False:            send_email('liny@casking.com.cn', title_mail, mail_temp)        self.assertEqual(r.json()['code'], 200)        self.assertEqual(r.json()['message'], '成功')        log.info('厂商禁用启用,正确')        time.sleep(1)    '''             厂商删除,正确    '''    def test_vendor_delete(self):        token_yaml = sys.path[-1] + '/a_udaam/data/token.yaml'        token = read_yaml(token_yaml, 'token')        # 获取ini中用例        data = self.cf.getini_by_option(self.case_paramt_ini, '厂商删除,正确', 'id')        url = 'http://' + self.url + '/sys/supplier/deleteById/' + data        headers = {            'Content-Type': 'application/json',            'Authorization': 'Bearer ' + token        }        r = self.post(url, {},headers)        log.info(r.text)        res = r.json()['code'] == 200        case_section = '厂商删除,正确'        url_path = '/sys/supplier/deleteById/'        mail_title_url = 'http://' + self.url + url_path        request_method = 'post'        print(result_buginfo_template(case_section, url, request_method,  data, r))        title = mail_buginfo_template(case_section, mail_title_url, request_method,  data, r)[0]        content = mail_buginfo_template(case_section, mail_title_url, request_method,  data, r)[1]        bug_to_zentao(res, title, content.replace('\'','').replace('"',''), 'zhaop', 'xiaojc')        bug_id = from_zentaotitle_get_zentaoid(title)        title_mail = 'BUG #' + str(bug_id) + ' ' + title        mail_temp = bug_mail_template(str(bug_id), title, content, ['code='+str(r.json()['code'])],                                      ['code=200'],                                      new_time().split(' ')[0], new_time().split(' ')[1], '禅道管理')        if res == False:            send_email('liny@casking.com.cn', title_mail, mail_temp)        self.assertEqual(r.json()['code'], 200)        self.assertEqual(r.json()['message'], '成功')        log.info('厂商删除,正确')        time.sleep(1)