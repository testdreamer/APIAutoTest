#-- coding: utf-8 --#@Time : 2022/6/20 10:00#@Author : tianxh#@Email : tianxh@casking.com.cn#@File : test_udaam_divisionmanagement.py#@Software: PyCharmfrom Utils.page import *from Utils.dicttogetparameter import *from Basepage.unittestChushihua import TestApifrom Utils.operationyaml import *from Utils.operationini import Conffrom Utils.operationini import *from Utils.log import *import jsonfrom Utils.operation_zentao_mysql import *from Utils.send_email import *from Utils.all_style_template import *from Utils.encrypt import *from Utils.currenttime import *import sys,ossys.path.append((os.path.abspath(os.path.join(os.path.dirname(__file__), '../'))))class DivisionManagement(TestApi,Helper):    # 获取服务器地址,,,    url = read_yaml(sys.path[-1] + '/data/server_address.yaml', 'url')    case_paramt_ini = sys.path[-1] + '/data/case_parameters.ini'    cf = Conf    '''                    机构树查询,正确                    '''    def test_query_org_tree(self):        token_yaml = sys.path[-1] + '/a_udaam/data/token.yaml'        token = read_yaml(token_yaml, 'token')        # 获取ini中用例        data = self.cf.getini_by_section(self.case_paramt_ini, '机构树查询,正确')        data1 = json.dumps(json.loads(str(data).replace("'", "\"").replace('"null"', 'null').replace('"true"', 'true')))        get_parameter = dict_to_get_parameter(data)        url = 'http://' + self.url + '/sys/org/page/loadUserOrg?' + get_parameter        headers = {            'Content-Type': 'application/json',            'Authorization': 'Bearer ' + token        }        r = self.get(url, headers)        log.info(r.text)        sources = []        for i in range(len(r.json()['data'])):            sources.append(r.json()['data'][i]['name'])        res = r.json()['code'] == 200 and '测试机构auto' in sources        case_section = '机构树查询,正确'        url_path = '/sys/org/page/loadUserOrg'        mail_title_url = 'http://' + self.url + url_path        request_method = 'get'        print(result_buginfo_template(case_section, url, request_method, data, r))        title = mail_buginfo_template(case_section, mail_title_url, request_method, data, r)[0]        content = mail_buginfo_template(case_section, mail_title_url, request_method, data, r)[1]        bug_to_zentao(res, title, content.replace('\'','').replace('"',''), 'zhaop', 'xiaojc')        bug_id = from_zentaotitle_get_zentaoid(title)        title_mail = 'BUG #' + str(bug_id) + ' ' + title        mail_temp = bug_mail_template(str(bug_id), title, content,                                      ['code=' + str(r.json()['code']),sources],                                      ['code=200',['测试机构auto']],                                      new_time().split(' ')[0], new_time().split(' ')[1], '禅道管理')        if res == False:            send_email('liny@casking.com.cn', title_mail, mail_temp)        self.assertEqual(r.json()['message'], '成功')        self.assertTrue(res)        if '测试机构auto' in sources:            url_a = 'http://' + self.url + '/sys/org/page/list?code=&name='+'测试机构auto'+'&enabled=&pageNum=1&pageSize=10'            headers_a = {                'Content-Type': 'application/json',                'Authorization': 'Bearer ' + token            }            r_a = self.get(url_a, headers_a)            #将机构的id写到[新增部门,正确]orgId,orgName中            self.cf.put_ini(self.case_paramt_ini,'新增部门,正确','orgId',r_a.json()['data']['content'][0]['id'])            self.cf.put_ini(self.case_paramt_ini, '新增部门,正确', 'orgName', r_a.json()['data']['content'][0]['id'])        log.info('机构树查询,正确')        time.sleep(1)    '''                        新增部门,正确         '''    def test_insert_division(self):        token_yaml = sys.path[-1] + '/a_udaam/data/token.yaml'        token = read_yaml(token_yaml, 'token')        self.cf.put_ini(self.case_paramt_ini, '新增部门,正确', 'name', str(get_time()))        self.cf.put_ini(self.case_paramt_ini, '新增部门,正确', 'code', str(get_time()))        # 获取ini中用例        data = self.cf.getini_by_section(self.case_paramt_ini, '新增部门,正确')        data1 = json.dumps(json.loads(str(data).replace("'", "\"").replace('"null"', 'null').replace('"true"', 'true')))        get_parameter = dict_to_get_parameter(data)        url = 'http://' + self.url + '/sys/dept/page/list/add'        headers = {            'Content-Type': 'application/json',            'Authorization': 'Bearer ' + token        }        r = self.post(url, data1,headers)        log.info(r.text)        res = r.json()['code'] == 200        case_section = '新增部门,正确'        url_path = '/sys/dept/page/list/add'        mail_title_url = 'http://' + self.url + url_path        request_method = 'post'        print(result_buginfo_template(case_section, url, request_method, data, r))        title = mail_buginfo_template(case_section, mail_title_url, request_method, data, r)[0]        content = mail_buginfo_template(case_section, mail_title_url, request_method, data, r)[1]        bug_to_zentao(res, title, content.replace('\'','').replace('"',''), 'zhaop', 'xiaojc')        bug_id = from_zentaotitle_get_zentaoid(title)        title_mail = 'BUG #' + str(bug_id) + ' ' + title        mail_temp = bug_mail_template(str(bug_id), title, content,                                      ['code=' + str(r.json()['code'])],                                      ['code=200'],                                      new_time().split(' ')[0], new_time().split(' ')[1], '禅道管理')        if res == False:            send_email('liny@casking.com.cn', title_mail, mail_temp)        self.assertEqual(r.json()['message'], '成功')        self.assertTrue(res)        # 获取[新增部门,正确]的name        insert_div_name = self.cf.getini_by_option(self.case_paramt_ini, '新增部门,正确', 'name')        # 将name写到[部门列表查询,正确]的seachStr中        self.cf.put_ini(self.case_paramt_ini, '部门列表查询,正确', 'seachStr', insert_div_name)        log.info('新增部门,正确')        time.sleep(1)    '''                        部门列表查询,正确         '''    def test_query_division_list(self):        token_yaml = sys.path[-1] + '/a_udaam/data/token.yaml'        token = read_yaml(token_yaml, 'token')        # 获取ini中用例        data = self.cf.getini_by_section(self.case_paramt_ini, '部门列表查询,正确')        data1 = json.dumps(json.loads(str(data).replace("'", "\"").replace('"null"', 'null').replace('"true"', 'true')))        get_parameter = dict_to_get_parameter(data)        url = 'http://' + self.url + '/sys/dept/page/list?' + get_parameter        headers = {            'Content-Type': 'application/json',            'Authorization': 'Bearer ' + token        }        r = self.get(url, headers)        log.info(r.text)        # 获取[部门列表查询,正确]的seachStr值进行校验        # division_list_seachstr = self.cf.getini_by_option(self.case_paramt_ini, '部门列表查询,正确', 'seachStr')        res = r.json()['code'] == 200        case_section = '部门列表查询,正确'        url_path = '/sys/dept/page/list'        mail_title_url = 'http://' + self.url + url_path        request_method = 'get'        print(result_buginfo_template(case_section, url, request_method, data, r))        title = mail_buginfo_template(case_section, mail_title_url, request_method, data, r)[0]        content = mail_buginfo_template(case_section, mail_title_url, request_method, data, r)[1]        bug_to_zentao(res, title, content.replace('\'','').replace('"',''), 'zhaop', 'xiaojc')        bug_id = from_zentaotitle_get_zentaoid(title)        title_mail = 'BUG #' + str(bug_id) + ' ' + title        mail_temp = bug_mail_template(str(bug_id), title, content,                                      ['code=' + str(r.json()['code'])],                                      ['code=200'],                                      new_time().split(' ')[0], new_time().split(' ')[1], '禅道管理')        if res == False:            send_email('liny@casking.com.cn', title_mail, mail_temp)        self.assertEqual(r.json()['message'], '成功')        self.assertTrue(res)        log.info('部门列表查询,正确')        time.sleep(1)    '''                            部门修改,正确             '''    def test_update_division(self):        token_yaml = sys.path[-1] + '/a_udaam/data/token.yaml'        token = read_yaml(token_yaml, 'token')        self.cf.put_ini(self.case_paramt_ini, '部门修改,正确', 'code', str(get_time()))        self.cf.put_ini(self.case_paramt_ini, '部门修改,正确', 'orgName', str(get_time()))        # 获取[新增部门,正确]的name        insert_div_name = self.cf.getini_by_option(self.case_paramt_ini, '新增部门,正确', 'name')        url = 'http://192.168.13.148:10020/sys/dept/page/list?seachStr='+insert_div_name+'&enabled=&pageNum=1&pageSize=10&orgId='        headers = {            'Content-Type': 'application/json',            'Authorization': 'Bearer ' + token        }        r = self.get(url, headers)        log.info(r.text)        # 获取id,orgId,orgName值写到[部门修改,正确]id,orgId,orgName中        self.cf.put_ini(self.case_paramt_ini, '部门修改,正确', 'id', r.json()['data']['content'][0]['id'])        time.sleep(3)        self.cf.put_ini(self.case_paramt_ini, '部门修改,正确', 'orgId', r.json()['data']['content'][0]['orgId'])        time.sleep(3)        self.cf.put_ini(self.case_paramt_ini, '部门修改,正确', 'orgName', r.json()['data']['content'][0]['orgName'])        time.sleep(3)        # 获取name进行修改后写到[部门修改,正确]name中        self.cf.put_ini(self.case_paramt_ini, '部门修改,正确', 'name', str(get_time()))        # 获取ini中用例        data = self.cf.getini_by_section(self.case_paramt_ini, '部门修改,正确')        data1 = json.dumps(json.loads(str(data).replace("'", "\"").replace('"null"', 'null').replace('"true"', 'true')))        get_parameter = dict_to_get_parameter(data)        url = 'http://' + self.url + '/sys/dept/page/list/update'        r = self.post(url, data1, headers)        log.info(r.text)        res = r.json()['code'] == 200        case_section = '部门修改,正确'        url_path = '/sys/dept/page/list/update'        mail_title_url = 'http://' + self.url + url_path        request_method = 'post'        print(result_buginfo_template(case_section, url, request_method, data, r))        title = mail_buginfo_template(case_section, mail_title_url, request_method, data, r)[0]        content = mail_buginfo_template(case_section, mail_title_url, request_method, data, r)[1]        bug_to_zentao(res, title, content.replace('\'','').replace('"',''), 'zhaop', 'xiaojc')        bug_id = from_zentaotitle_get_zentaoid(title)        title_mail = 'BUG #' + str(bug_id) + ' ' + title        mail_temp = bug_mail_template(str(bug_id), title, content,                                      ['code=' + str(r.json()['code'])],                                      ['code=200'],                                      new_time().split(' ')[0], new_time().split(' ')[1], '禅道管理')        if res == False:            send_email('liny@casking.com.cn', title_mail, mail_temp)        self.assertEqual(r.json()['message'], '成功')        self.assertTrue(res)        log.info('部门修改,正确')        time.sleep(1)    '''                        部门禁用,正确                '''    def test_org_close(self):        token_yaml = sys.path[-1] + '/a_udaam/data/token.yaml'        token = read_yaml(token_yaml, 'token')        # 获取[新增部门,正确]的name        insert_div_name = self.cf.getini_by_option(self.case_paramt_ini, '新增部门,正确', 'name')        url = 'http://192.168.13.148:10020/sys/dept/page/list?seachStr=' + insert_div_name + '&enabled=&pageNum=1&pageSize=10&orgId='        headers = {            'Content-Type': 'application/json',            'Authorization': 'Bearer ' + token        }        r = self.get(url, headers)        # 获取id值写到[部门禁用,正确]id中        self.cf.put_ini(self.case_paramt_ini, '部门禁用,正确', 'id', r.json()['data']['content'][0]['id'])        # 获取ini中用例        data = self.cf.getini_by_section(self.case_paramt_ini, '部门禁用,正确')        # data1 = json.dumps(json.loads(str(data).replace("'", "\"").replace('"null"', 'null').replace('"true"', 'true').replace('"false"', 'false')))        data1 = {}        get_parameter = dict_to_get_parameter(data)        url = 'http://' + self.url + '/sys/dept/page/list/updateDeptEnabled?' + get_parameter        headers = {            'Content-Type': 'application/json',            'Authorization': 'Bearer ' + token        }        r = self.post(url, data1, headers)        log.info(r.text)        # 访问 查询机构列表接口获取enabled值进行校验        update_div_name = self.cf.getini_by_option(self.case_paramt_ini,'新增部门,正确','name')        url1 = 'http://' + self.url + '/sys/dept/page/list?' + 'seachStr='+update_div_name+'&enabled=&pageNum=1&pageSize=10&orgId='        headers1 = {            'Content-Type': 'application/json',            'Authorization': 'Bearer ' + token        }        r1 = self.get(url1, headers1)        log.info(r1.text)        org_opcl_enabled = self.cf.getini_by_option(self.case_paramt_ini, '部门禁用,正确', 'enabled')        res = r.json()['code'] == 200        case_section = '部门禁用,正确'        url_path = '/sys/dept/page/list/updateDeptEnabled'        mail_title_url = 'http://' + self.url + url_path        request_method = 'post'        print(result_buginfo_template(case_section, url, request_method, data, r))        title = mail_buginfo_template(case_section, mail_title_url, request_method, data, r)[0]        content = mail_buginfo_template(case_section, mail_title_url, request_method, data, r)[1]        bug_to_zentao(res, title, content.replace('\'','').replace('"',''), 'zhaop', 'xiaojc')        bug_id = from_zentaotitle_get_zentaoid(title)        title_mail = 'BUG #' + str(bug_id) + ' ' + title        mail_temp = bug_mail_template(str(bug_id), title, content,                                      ['code=' + str(r.json()['code'])],                                      ['code=200'],                                      new_time().split(' ')[0], new_time().split(' ')[1], '禅道管理')        if res == False:            send_email('liny@casking.com.cn', title_mail, mail_temp)        self.assertEqual(r.json()['message'], '成功')        self.assertTrue(res)        # self.assertEqual(str(r1.json()['data']['content'][0]['enabled']).lower(), org_opcl_enabled)        log.info('部门禁用,正确')        time.sleep(1)    '''                            部门启用,正确                    '''    def test_org_open(self):        token_yaml = sys.path[-1] + '/a_udaam/data/token.yaml'        token = read_yaml(token_yaml, 'token')        # 获取[新增部门,正确]的name        insert_div_name = self.cf.getini_by_option(self.case_paramt_ini, '新增部门,正确', 'name')        url = 'http://192.168.13.148:10020/sys/dept/page/list?seachStr=' + insert_div_name + '&enabled=&pageNum=1&pageSize=10&orgId='        headers = {            'Content-Type': 'application/json',            'Authorization': 'Bearer ' + token        }        r = self.get(url, headers)        # 获取id值写到[部门启用,正确]id中        self.cf.put_ini(self.case_paramt_ini, '部门启用,正确', 'id', r.json()['data']['content'][0]['id'])        # 获取ini中用例        data = self.cf.getini_by_section(self.case_paramt_ini, '部门启用,正确')        # data1 = json.dumps(json.loads(str(data).replace("'", "\"").replace('"null"', 'null').replace('"true"', 'true').replace('"false"', 'false')))        data1 = {}        get_parameter = dict_to_get_parameter(data)        url = 'http://' + self.url + '/sys/dept/page/list/updateDeptEnabled?' + get_parameter        headers = {            'Content-Type': 'application/json',            'Authorization': 'Bearer ' + token        }        r = self.post(url, data1, headers)        log.info(r.text)        # 访问 查询机构列表接口获取enabled值进行校验        update_div_name = self.cf.getini_by_option(self.case_paramt_ini, '新增部门,正确', 'name')        url1 = 'http://' + self.url + '/sys/dept/page/list?' + 'seachStr=' + update_div_name + '&enabled=&pageNum=1&pageSize=10&orgId='        headers1 = {            'Content-Type': 'application/json',            'Authorization': 'Bearer ' + token        }        r1 = self.get(url1, headers1)        log.info(r1.text)        org_opcl_enabled = self.cf.getini_by_option(self.case_paramt_ini, '部门启用,正确', 'enabled')        res = r.json()['code'] == 200        case_section = '部门启用,正确'        url_path = '/sys/dept/page/list/updateDeptEnabled'        mail_title_url = 'http://' + self.url + url_path        request_method = 'post'        print(result_buginfo_template(case_section, url, request_method, data, r))        title = mail_buginfo_template(case_section, mail_title_url, request_method, data, r)[0]        content = mail_buginfo_template(case_section, mail_title_url, request_method, data, r)[1]        bug_to_zentao(res, title, content.replace('\'','').replace('"',''), 'zhaop', 'xiaojc')        bug_id = from_zentaotitle_get_zentaoid(title)        title_mail = 'BUG #' + str(bug_id) + ' ' + title        mail_temp = bug_mail_template(str(bug_id), title, content,                                      ['code=' + str(r.json()['code'])],                                      ['code=200'],                                      new_time().split(' ')[0], new_time().split(' ')[1], '禅道管理')        if res == False:            send_email('liny@casking.com.cn', title_mail, mail_temp)        self.assertEqual(r.json()['message'], '成功')        self.assertTrue(res)        # self.assertEqual(str(r1.json()['data']['content'][0]['enabled']).lower(), org_opcl_enabled)        log.info('部门启用,正确')        time.sleep(1)    '''                部门删除,正确        '''    def test_delete_division(self):        token_yaml = sys.path[-1] + '/a_udaam/data/token.yaml'        token = read_yaml(token_yaml, 'token')        # 获取[新增部门,正确]的name        insert_div_name = self.cf.getini_by_option(self.case_paramt_ini, '新增部门,正确', 'name')        url = 'http://192.168.13.148:10020/sys/dept/page/list?seachStr=' + insert_div_name + '&enabled=&pageNum=1&pageSize=10&orgId='        headers = {            'Content-Type': 'application/json',            'Authorization': 'Bearer ' + token        }        r = self.get(url, headers)        # 获取id值写到[部门删除,正确]id中        self.cf.put_ini(self.case_paramt_ini, '部门删除,正确', 'id', r.json()['data']['content'][0]['id'])        # 获取ini中用例        get_parameter = self.cf.getini_by_option(self.case_paramt_ini, '部门删除,正确', 'id')        url = 'http://' + self.url + '/sys/dept/page/list/delete/' + get_parameter        headers = {            'Content-Type': 'application/json',            'Authorization': 'Bearer ' + token        }        r = self.post(url,{}, headers)        log.info(r.text)        res = r.json()['code'] == 200        case_section = '部门删除,正确'        url_path = '/sys/dept/page/list/delete/'        mail_title_url = 'http://' + self.url + url_path        request_method = 'post'        print(result_buginfo_template(case_section, url, request_method, get_parameter, r))        title = mail_buginfo_template(case_section, mail_title_url, request_method, get_parameter, r)[0]        content = mail_buginfo_template(case_section, mail_title_url, request_method, get_parameter, r)[1]        bug_to_zentao(res, title, content.replace('\'','').replace('"',''), 'zhaop', 'xiaojc')        bug_id = from_zentaotitle_get_zentaoid(title)        title_mail = 'BUG #' + str(bug_id) + ' ' + title        mail_temp = bug_mail_template(str(bug_id), title, content,                                      ['code=' + str(r.json()['code'])],                                      ['code=200'],                                      new_time().split(' ')[0], new_time().split(' ')[1], '禅道管理')        if res == False:            send_email('liny@casking.com.cn', title_mail, mail_temp)        self.assertEqual(r.json()['message'], '成功')        self.assertTrue(res)        log.info('人员信息删除,正确')        time.sleep(1)