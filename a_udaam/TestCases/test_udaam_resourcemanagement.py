#-- coding: utf-8 --#@Time : 2022/6/7 13:13#@Author : tianxh#@Email : tianxh@casking.com.cn#@File : test_udaam_resourcemanagement.py#@Software: PyCharmfrom Utils.page import *from Utils.dicttogetparameter import *from Basepage.unittestChushihua import TestApifrom Utils.operationyaml import *from Utils.operationini import Conffrom Utils.operationini import *from Utils.log import *from Utils.currenttime import *import jsonfrom Utils.send_email import *from Utils.operation_zentao_mysql import *from Utils.encrypt import *from Utils.currenttime import *from Utils.all_style_template import *import sys,ossys.path.append((os.path.abspath(os.path.join(os.path.dirname(__file__), '../'))))class ResourceManagement(TestApi,Helper):    # 获取服务器地址,,,    url = read_yaml(sys.path[-1] + '/data/server_address.yaml', 'url')    case_paramt_ini = sys.path[-1] + '/data/case_parameters.ini'    cf = Conf    '''    查询资源列表,正确    '''    def test_query_resource_list(self):        # 获取ini中用例        case_section = '查询资源列表,正确'        url_path = '/sys/poolResource/page/list'        mail_title_url = 'http://' + self.url + url_path        request_method = 'get'        data = self.cf.getini_by_section(self.case_paramt_ini, case_section)        data1 = json.dumps(json.loads(str(data).replace("'","\"").replace('"null"','null').replace('"true"','true')))        get_parameter = dict_to_get_parameter(data)        url = 'http://' + self.url + url_path+'?'+get_parameter        token_yaml = sys.path[-1] + '/a_udaam/data/token.yaml'        token = read_yaml(token_yaml, 'token')        headers = {            'Content-Type': 'application/json',            'Authorization': 'Bearer '+token        }        r = self.get(url,headers)        print(result_buginfo_template(case_section,url,request_method,data1,r))        log.info(r.text)        if self.url == '192.168.13.159:10041':            self.assertEqual(r.json()['code'],200)            self.assertEqual(r.json()['message'], '成功')            self.assertEqual(len(r.json()['data']['content']), 10)            sources = []            for i in range(len(r.json()['data']['content'])):                sources.append(r.json()['data']['content'][i]['systemName'])            log.info(sources)            self.assertTrue('电子病历共享调阅系统' in sources or '盐田综管系统' in sources or '数据质量后台管理系统' in sources )            log.info('查询资源列表,正确')            time.sleep(1)        else:            self.assertEqual(len(r.json()['data']['content']), 10)            sources = []            for i in range(len(r.json()['data']['content'])):                sources.append(r.json()['data']['content'][i]['systemName'])            log.info(sources)            result= '患者360视图' in sources and '危急值管理系统' in sources and '数据共享发布管理系统' in sources            res = r.json()['code'] == 200            title = mail_buginfo_template(case_section,mail_title_url,request_method,data1,r)[0]            content = mail_buginfo_template(case_section, mail_title_url, request_method, data1, r)[1]            bug_to_zentao(res, title, content.replace('\'','').replace('"',''), 'zhaop', 'xiaojc')            bug_id = from_zentaotitle_get_zentaoid(title)            title_mail = 'BUG #' + str(bug_id) + ' ' + title            mail_temp = bug_mail_template(str(bug_id),title,content,['code='+str(r.json()['code'])],['code=200'],new_time().split(' ')[0],new_time().split(' ')[1],'禅道管理')            if res == False:                send_email('liny@casking.com.cn', title_mail, mail_temp)            self.assertEqual(r.json()['code'], 200)            self.assertEqual(r.json()['message'], '成功')            # self.assertTrue(result)            log.info('查询资源列表,正确')            time.sleep(1)    '''        查询系统资源列表,正确    '''    def test_example_query_system_resource_list(self):        case_section = '查询系统资源列表,正确'        url_path = '/sys/poolResource/page/findAll'        mail_title_url = 'http://' + self.url + url_path        request_method = 'get'        # 获取ini中用例        data = self.cf.getini_by_section(self.case_paramt_ini, '查询系统资源列表,正确')        data1 = json.dumps(json.loads(str(data).replace("'","\"").replace('"null"','null').replace('"true"','true')))        get_parameter = dict_to_get_parameter(data)        token_yaml = sys.path[-1] + '/a_udaam/data/token.yaml'        token = read_yaml(token_yaml, 'token')        url = 'http://' + self.url + '/sys/poolResource/page/findAll?' + get_parameter        headers = {            'Content-Type': 'application/json',            'Authorization': 'Bearer ' + token        }        r = self.get(url, headers)        res = r.json()['code'] == 200        print(result_buginfo_template(case_section, url, request_method, data1, r))        title = mail_buginfo_template(case_section, mail_title_url, request_method, data1, r)[0]        content = mail_buginfo_template(case_section, mail_title_url, request_method, data1, r)[1]        bug_to_zentao(res, title, content.replace('\'','').replace('"',''), 'zhaop', 'xiaojc')        bug_id = from_zentaotitle_get_zentaoid(title)        title_mail = 'BUG #' + str(bug_id) + ' ' + title        mail_temp = bug_mail_template(str(bug_id), title, content, ['code='+str(r.json()['code'])],['code=200'],                                      new_time().split(' ')[0], new_time().split(' ')[1], '禅道管理')        if res==False:            send_email('liny@casking.com.cn', title_mail, mail_temp)        self.assertTrue(res)        self.assertEqual(r.json()['message'], '成功')        log.info('查询系统资源列表,正确')        time.sleep(1)