# -- coding: utf-8 --# @Author : lirg# @Email : lirg@casking.com.cnfrom Utils.page import *from Utils.dicttogetparameter import *from Basepage.unittestChushihua import TestApifrom Utils.operationyaml import *from Utils.operationini import Conffrom Utils.operationini import *from Utils.log import *from Utils.operation_zentao_mysql import *from Utils.send_email import *from Utils.all_style_template import *from Utils.currenttime import *import jsonfrom Utils.encrypt import *from Utils.currenttime import *import sys,ossys.path.append((os.path.abspath(os.path.join(os.path.dirname(__file__), '../'))))class Test_Loginlog(TestApi,Helper):    """    登录日志    /sys/loginLog/list 登录日志查询   /sys/menuOpLog/list    菜单访问日志查询   /sys/siteAccessLog/page/list   站点访问日志查询   /sys/grantOperationLog/page/list   授权操作日志查询   /sys/log/page/list 关键操作日志查询    """    # 获取服务器地址,,,    url = read_yaml(sys.path[-1] + '/data/server_address.yaml', 'url')    case_paramt_ini = sys.path[-1] + '/data/case_parameters.ini'    cf = Conf    #登录日志查询,正确    def test_loginloglist_right(self):        token_yaml = sys.path[-1] + '/a_udaam/data/token.yaml'        token = read_yaml(token_yaml, 'token')        # 获取ini中用例        # print(self.case_paramt_ini)        data = self.cf.getini_by_section(self.case_paramt_ini, '登录日志查询,正确')        # data1 = json.dumps(json.loads(str(data).replace("'","\"").replace('"null"','null').replace('"true"','true')))        get_parameter = dict_to_get_parameter(data)        url = 'http://' + self.url + '/sys/loginLog/list?' + get_parameter        headers = {            'Content-Type': 'application/json',            'Authorization': 'Bearer ' + token        }        r = self.get(url, headers)        log.info(r.text)        res = r.json()['code'] == 200        case_section = '登录日志查询,正确'        url_path = '/sys/loginLog/list'        mail_title_url = 'http://' + self.url + url_path        request_method = 'get'        print(result_buginfo_template(case_section, url, request_method, data, r))        title = mail_buginfo_template(case_section, mail_title_url, request_method, data, r)[0]        content = mail_buginfo_template(case_section, mail_title_url, request_method, data, r)[1]        bug_to_zentao(res, title, content.replace('\'','').replace('"',''), 'zhaop', 'xiaojc')        bug_id = from_zentaotitle_get_zentaoid(title)        title_mail = 'BUG #' + str(bug_id) + ' ' + title        mail_temp = bug_mail_template(str(bug_id), title, content,                                      ['code=' + str(r.json()['code'])],                                      ['code=200'],                                      new_time().split(' ')[0], new_time().split(' ')[1], '禅道管理')        if res == False:            send_email('liny@casking.com.cn', title_mail, mail_temp)        self.assertEqual(r.json()['code'], 200)        self.assertEqual(r.json()['message'], '成功')        # self.assertEqual(r.json()['data']["content"][0]['userName'], "superAdmin")    #登录日志查询,未传所有参数    def test_loginloglist_noallid1(self):        token_yaml = sys.path[-1] + '/a_udaam/data/token.yaml'        token = read_yaml(token_yaml, 'token')        # 获取ini中用例        # print(self.case_paramt_ini)        data = self.cf.getini_by_section(self.case_paramt_ini, '登录日志查询,未传所有参数')        # data1 = json.dumps(json.loads(str(data).replace("'","\"").replace('"null"','null').replace('"true"','true')))        get_parameter = dict_to_get_parameter(data)        url = 'http://' + self.url + '/sys/loginLog/list?' + get_parameter        headers = {            'Content-Type': 'application/json',            'Authorization': 'Bearer ' + token        }        r = self.get(url, headers)        log.info(r.text)        res = r.json()['code'] == 500        case_section = '登录日志查询,未传所有参数'        url_path = '/sys/loginLog/list'        mail_title_url = 'http://' + self.url + url_path        request_method = 'get'        print(result_buginfo_template(case_section, url, request_method, data, r))        title = mail_buginfo_template(case_section, mail_title_url, request_method, data, r)[0]        content = mail_buginfo_template(case_section, mail_title_url, request_method, data, r)[1]        bug_to_zentao(res, title, content.replace('\'','').replace('"',''), 'zhaop', 'xiaojc')        bug_id = from_zentaotitle_get_zentaoid(title)        title_mail = 'BUG #' + str(bug_id) + ' ' + title        mail_temp = bug_mail_template(str(bug_id), title, content,                                      ['code=' + str(r.json()['code'])],                                      ['code=500'],                                      new_time().split(' ')[0], new_time().split(' ')[1], '禅道管理')        if res == False:            send_email('liny@casking.com.cn', title_mail, mail_temp)        self.assertEqual(r.json()['code'], 500)        self.assertEqual(r.json()['message'], '请求参数包含非法字符！')        # self.assertEqual(r.json()['data']["content"][0]['userName'], "田策师")    # 登录日志查询,未传所页码参数    def test_loginloglist_noallid2(self):        token_yaml = sys.path[-1] + '/a_udaam/data/token.yaml'        token = read_yaml(token_yaml, 'token')        # 获取ini中用例        # print(self.case_paramt_ini)        data = self.cf.getini_by_section(self.case_paramt_ini, '登录日志查询,未传页码参数')        # data1 = json.dumps(json.loads(str(data).replace("'","\"").replace('"null"','null').replace('"true"','true')))        get_parameter = dict_to_get_parameter(data)        url = 'http://' + self.url + '/sys/loginLog/list?' + get_parameter        headers = {            'Content-Type': 'application/json',            'Authorization': 'Bearer ' + token        }        r = self.get(url, headers)        log.info(r.text)        res = r.json()['code'] == 500        case_section = '登录日志查询,未传页码参数'        url_path = '/sys/loginLog/list'        mail_title_url = 'http://' + self.url + url_path        request_method = 'get'        print(result_buginfo_template(case_section, url, request_method, data, r))        title = mail_buginfo_template(case_section, mail_title_url, request_method, data, r)[0]        content = mail_buginfo_template(case_section, mail_title_url, request_method, data, r)[1]        bug_to_zentao(res, title, content.replace('\'','').replace('"',''), 'zhaop', 'xiaojc')        bug_id = from_zentaotitle_get_zentaoid(title)        title_mail = 'BUG #' + str(bug_id) + ' ' + title        mail_temp = bug_mail_template(str(bug_id), title, content,                                      ['code=' + str(r.json()['code'])],                                      ['code=500'],                                      new_time().split(' ')[0], new_time().split(' ')[1], '禅道管理')        if res == False:            send_email('liny@casking.com.cn', title_mail, mail_temp)        self.assertEqual(r.json()['code'], 500)        self.assertEqual(r.json()['message'], '请求参数包含非法字符！')        # self.assertEqual(r.json()['data']["content"][0]['userName'], "田策师")    # 登录日志查询,未传页码条数参数    def test_loginloglist_noallid3(self):        token_yaml = sys.path[-1] + '/a_udaam/data/token.yaml'        token = read_yaml(token_yaml, 'token')        # 获取ini中用例        # print(self.case_paramt_ini)        data = self.cf.getini_by_section(self.case_paramt_ini, '登录日志查询,未传页码条数参数')        # data1 = json.dumps(json.loads(str(data).replace("'","\"").replace('"null"','null').replace('"true"','true')))        get_parameter = dict_to_get_parameter(data)        url = 'http://' + self.url + '/sys/loginLog/list?' + get_parameter        headers = {            'Content-Type': 'application/json',            'Authorization': 'Bearer ' + token        }        r = self.get(url, headers)        log.info(r.text)        res = r.json()['code'] == 200        case_section = '登录日志查询,未传页码条数参数'        url_path = '/sys/loginLog/list'        mail_title_url = 'http://' + self.url + url_path        request_method = 'get'        print(result_buginfo_template(case_section, url, request_method, data, r))        title = mail_buginfo_template(case_section, mail_title_url, request_method, data, r)[0]        content = mail_buginfo_template(case_section, mail_title_url, request_method, data, r)[1]        bug_to_zentao(res, title, content.replace('\'','').replace('"',''), 'zhaop', 'xiaojc')        bug_id = from_zentaotitle_get_zentaoid(title)        title_mail = 'BUG #' + str(bug_id) + ' ' + title        mail_temp = bug_mail_template(str(bug_id), title, content,                                      ['code=' + str(r.json()['code'])],                                      ['code=200'],                                      new_time().split(' ')[0], new_time().split(' ')[1], '禅道管理')        if res == False:            send_email('liny@casking.com.cn', title_mail, mail_temp)        self.assertEqual(r.json()['code'], 200)        self.assertEqual(r.json()['message'], '成功')        # self.assertEqual(r.json()['data']["content"][0]['userName'], "superAdmin")    #/sys/menuOpLog/list   菜单访问日志查询    #菜单访问日志查询,正确    def test_menuOpLoglist_right(self):        token_yaml = sys.path[-1] + '/a_udaam/data/token.yaml'        token = read_yaml(token_yaml, 'token')        # 获取ini中用例        # print(self.case_paramt_ini)        data = self.cf.getini_by_section(self.case_paramt_ini, '菜单访问日志查询,正确')        # data1 = json.dumps(json.loads(str(data).replace("'","\"").replace('"null"','null').replace('"true"','true')))        get_parameter = dict_to_get_parameter(data)        url = 'http://' + self.url + '/sys/menuOpLog/list?' + get_parameter        headers = {            'Content-Type': 'application/json',            'Authorization': 'Bearer ' + token        }        r = self.get(url, headers)        log.info(r.text)        res = r.json()['code'] == 200        case_section = '菜单访问日志查询,正确'        url_path = '/sys/menuOpLog/list'        mail_title_url = 'http://' + self.url + url_path        request_method = 'get'        print(result_buginfo_template(case_section, url, request_method, data, r))        title = mail_buginfo_template(case_section, mail_title_url, request_method, data, r)[0]        content = mail_buginfo_template(case_section, mail_title_url, request_method, data, r)[1]        bug_to_zentao(res, title, content.replace('\'','').replace('"',''), 'zhaop', 'xiaojc')        bug_id = from_zentaotitle_get_zentaoid(title)        title_mail = 'BUG #' + str(bug_id) + ' ' + title        mail_temp = bug_mail_template(str(bug_id), title, content,                                      ['code=' + str(r.json()['code'])],                                      ['code=200'],                                      new_time().split(' ')[0], new_time().split(' ')[1], '禅道管理')        if res == False:            send_email('liny@casking.com.cn', title_mail, mail_temp)        self.assertEqual(r.json()['code'], 200)        self.assertEqual(r.json()['message'], '成功')        # self.assertEqual(r.json()['data']["content"][0]['systemName'], "田策师")    #菜单访问日志查询,未传所有参数    def test_menuOpLoglist_noallid1(self):        token_yaml = sys.path[-1] + '/a_udaam/data/token.yaml'        token = read_yaml(token_yaml, 'token')        # 获取ini中用例        # print(self.case_paramt_ini)        data = self.cf.getini_by_section(self.case_paramt_ini, '菜单访问日志查询,未传所有参数')        # data1 = json.dumps(json.loads(str(data).replace("'","\"").replace('"null"','null').replace('"true"','true')))        get_parameter = dict_to_get_parameter(data)        url = 'http://' + self.url + '/sys/menuOpLog/list?' + get_parameter        headers = {            'Content-Type': 'application/json',            'Authorization': 'Bearer ' + token        }        r = self.get(url, headers)        log.info(r.text)        res = r.json()['code'] == 500        case_section = '菜单访问日志查询,未传所有参数'        url_path = '/sys/menuOpLog/list'        mail_title_url = 'http://' + self.url + url_path        request_method = 'get'        print(result_buginfo_template(case_section, url, request_method, data, r))        title = mail_buginfo_template(case_section, mail_title_url, request_method, data, r)[0]        content = mail_buginfo_template(case_section, mail_title_url, request_method, data, r)[1]        bug_to_zentao(res, title, content.replace('\'','').replace('"',''), 'zhaop', 'xiaojc')        bug_id = from_zentaotitle_get_zentaoid(title)        title_mail = 'BUG #' + str(bug_id) + ' ' + title        mail_temp = bug_mail_template(str(bug_id), title, content,                                      ['code=' + str(r.json()['code'])],                                      ['code=500'],                                      new_time().split(' ')[0], new_time().split(' ')[1], '禅道管理')        if res == False:            send_email('liny@casking.com.cn', title_mail, mail_temp)        self.assertEqual(r.json()['code'], 500)        self.assertEqual(r.json()['message'], '请求参数包含非法字符！')        # self.assertEqual(r.json()['data']["content"][0]['userName'], "田策师")    # 菜单访问日志查询,未传页码参数    def test_menuOpLoglist_noallid2(self):        token_yaml = sys.path[-1] + '/a_udaam/data/token.yaml'        token = read_yaml(token_yaml, 'token')        # 获取ini中用例        # print(self.case_paramt_ini)        data = self.cf.getini_by_section(self.case_paramt_ini, '菜单访问日志查询,未传页码参数')        # data1 = json.dumps(json.loads(str(data).replace("'","\"").replace('"null"','null').replace('"true"','true')))        get_parameter = dict_to_get_parameter(data)        url = 'http://' + self.url + '/sys/menuOpLog/list?' + get_parameter        headers = {            'Content-Type': 'application/json',            'Authorization': 'Bearer ' + token        }        r = self.get(url, headers)        log.info(r.text)        res = r.json()['code'] == 500        case_section = '菜单访问日志查询,未传页码参数'        url_path = '/sys/menuOpLog/list'        mail_title_url = 'http://' + self.url + url_path        request_method = 'get'        print(result_buginfo_template(case_section, url, request_method, data, r))        title = mail_buginfo_template(case_section, mail_title_url, request_method, data, r)[0]        content = mail_buginfo_template(case_section, mail_title_url, request_method, data, r)[1]        bug_to_zentao(res, title, content.replace('\'','').replace('"',''), 'zhaop', 'xiaojc')        bug_id = from_zentaotitle_get_zentaoid(title)        title_mail = 'BUG #' + str(bug_id) + ' ' + title        mail_temp = bug_mail_template(str(bug_id), title, content,                                      ['code=' + str(r.json()['code'])],                                      ['code=500'],                                      new_time().split(' ')[0], new_time().split(' ')[1], '禅道管理')        if res == False:            send_email('liny@casking.com.cn', title_mail, mail_temp)        self.assertEqual(r.json()['code'], 500)        self.assertEqual(r.json()['message'], '请求参数包含非法字符！')        # self.assertEqual(r.json()['data']["content"][0]['userName'], "田策师")    # 菜单访问日志查询,未传页码条数参数    def test_menuOpLoglist_noallid3(self):        token_yaml = sys.path[-1] + '/a_udaam/data/token.yaml'        token = read_yaml(token_yaml, 'token')        # 获取ini中用例        # print(self.case_paramt_ini)        data = self.cf.getini_by_section(self.case_paramt_ini, '菜单访问日志查询,未传页码条数参数')        # data1 = json.dumps(json.loads(str(data).replace("'","\"").replace('"null"','null').replace('"true"','true')))        get_parameter = dict_to_get_parameter(data)        url = 'http://' + self.url + '/sys/menuOpLog/list?' + get_parameter        headers = {            'Content-Type': 'application/json',            'Authorization': 'Bearer ' + token        }        r = self.get(url, headers)        log.info(r.text)        res = r.json()['code'] == 500        case_section = '菜单访问日志查询,未传页码条数参数'        url_path = '/sys/menuOpLog/list'        mail_title_url = 'http://' + self.url + url_path        request_method = 'get'        print(result_buginfo_template(case_section, url, request_method, data, r))        title = mail_buginfo_template(case_section, mail_title_url, request_method, data, r)[0]        content = mail_buginfo_template(case_section, mail_title_url, request_method, data, r)[1]        bug_to_zentao(res, title, content.replace('\'','').replace('"',''), 'zhaop', 'xiaojc')        bug_id = from_zentaotitle_get_zentaoid(title)        title_mail = 'BUG #' + str(bug_id) + ' ' + title        mail_temp = bug_mail_template(str(bug_id), title, content,                                      ['code=' + str(r.json()['code'])],                                      ['code=500'],                                      new_time().split(' ')[0], new_time().split(' ')[1], '禅道管理')        if res == False:            send_email('liny@casking.com.cn', title_mail, mail_temp)        self.assertEqual(r.json()['code'], 500)        self.assertEqual(r.json()['message'], '请求参数包含非法字符！')        # self.assertEqual(r.json()['data']["content"][0]['userName'], "阿胜")    # 菜单访问日志-获取所有菜单名称,正确    def test_menuOpLoglist_get_all_menus(self):        token_yaml = sys.path[-1] + '/a_udaam/data/token.yaml'        token = read_yaml(token_yaml, 'token')        # 获取ini中用例        # print(self.case_paramt_ini)        data = self.cf.getini_by_section(self.case_paramt_ini, '菜单访问日志-获取所有菜单名称,正确')        # data1 = json.dumps(json.loads(str(data).replace("'","\"").replace('"null"','null').replace('"true"','true')))        get_parameter = dict_to_get_parameter(data)        url = 'http://' + self.url + '/sys/menuOpLog/findAllMenuName?' + get_parameter        headers = {            'Content-Type': 'application/json',            'Authorization': 'Bearer ' + token        }        r = self.get(url, headers)        log.info(r.text)        sources = []        for i in range(len(r.json()['data'])):            sources.append(r.json()['data'][i])        res = '服务测试' in sources and '电子病历注册' in sources and '高级查找' in sources and '电子病历历史任务' in sources and r.json()['code'] == 200        case_section = '菜单访问日志-获取所有菜单名称,正确'        url_path = '/sys/menuOpLog/findAllMenuName'        mail_title_url = 'http://' + self.url + url_path        request_method = 'get'        print(result_buginfo_template(case_section, url, request_method, data, r))        title = mail_buginfo_template(case_section, mail_title_url, request_method, data, r)[0]        content = mail_buginfo_template(case_section, mail_title_url, request_method, data, r)[1]        bug_to_zentao(res, title, content.replace('\'','').replace('"',''), 'zhaop', 'xiaojc')        bug_id = from_zentaotitle_get_zentaoid(title)        title_mail = 'BUG #' + str(bug_id) + ' ' + title        mail_temp = bug_mail_template(str(bug_id), title, content,                                      ['code=' + str(r.json()['code'])],                                      ['code=200'],                                      new_time().split(' ')[0], new_time().split(' ')[1], '禅道管理')        if res == False:            send_email('liny@casking.com.cn', title_mail, mail_temp)        self.assertEqual(r.json()['code'], 200)        self.assertTrue(res)    # 菜单访问日志-查询所有机构,正确    def test_menuOpLoglist_query_all_org(self):        token_yaml = sys.path[-1] + '/a_udaam/data/token.yaml'        token = read_yaml(token_yaml, 'token')        # 获取ini中用例        # print(self.case_paramt_ini)        data = self.cf.getini_by_section(self.case_paramt_ini, '菜单访问日志-查询所有机构,正确')        # data1 = json.dumps(json.loads(str(data).replace("'","\"").replace('"null"','null').replace('"true"','true')))        get_parameter = dict_to_get_parameter(data)        url = 'http://' + self.url + '/sys/menuOpLog/findAllOrg?' + get_parameter        headers = {            'Content-Type': 'application/json',            'Authorization': 'Bearer ' + token        }        r = self.get(url, headers)        log.info(r.text)        if self.url == '192.168.13.159:10041':            sources = []            for i in range(len(r.json()['data'])):                sources.append(r.json()['data'][i]['name'])            res = '健教测试龙岗区' in sources and '三国集团' in sources and '龙岗第三人民医院' in sources and '龙岗第二人民医院' in sources            self.assertEqual(r.json()['code'], 200)            self.assertTrue(res)        else:            sources = []            for i in range(len(r.json()['data'])):                sources.append(r.json()['data'][i]['name'])            res = '深圳联影' in sources and '技术研发中心' in sources and '测试部' in sources and '深圳市龙岗中心医院' in sources and r.json()['code'] == 200            case_section = '菜单访问日志-查询所有机构,正确'            url_path = '/sys/menuOpLog/findAllOrg'            mail_title_url = 'http://' + self.url + url_path            request_method = 'get'            print(result_buginfo_template(case_section, url, request_method, data, r))            title = mail_buginfo_template(case_section, mail_title_url, request_method, data, r)[0]            content = mail_buginfo_template(case_section, mail_title_url, request_method, data, r)[1]            bug_to_zentao(res, title, content.replace('\'','').replace('"',''), 'zhaop', 'xiaojc')            bug_id = from_zentaotitle_get_zentaoid(title)            title_mail = 'BUG #' + str(bug_id) + ' ' + title            mail_temp = bug_mail_template(str(bug_id), title, content,                                          ['code=' + str(r.json()['code'])],                                          ['code=200'],                                          new_time().split(' ')[0], new_time().split(' ')[1], '禅道管理')            if res == False:                send_email('liny@casking.com.cn', title_mail, mail_temp)            self.assertEqual(r.json()['code'], 200)            self.assertTrue(res)    # 菜单访问日志-查询所有系统,正确    def test_menuOpLoglist_query_all_sys(self):        token_yaml = sys.path[-1] + '/a_udaam/data/token.yaml'        token = read_yaml(token_yaml, 'token')        # 获取ini中用例        # print(self.case_paramt_ini)        data = self.cf.getini_by_section(self.case_paramt_ini, '菜单访问日志-查询所有系统,正确')        # data1 = json.dumps(json.loads(str(data).replace("'","\"").replace('"null"','null').replace('"true"','true')))        get_parameter = dict_to_get_parameter(data)        url = 'http://' + self.url + '/sys/menuOpLog/findAllSystem?' + get_parameter        headers = {            'Content-Type': 'application/json',            'Authorization': 'Bearer ' + token        }        r = self.get(url, headers)        log.info(r.text)        if self.url == '192.168.13.159:10041':            sources = []            for i in range(len(r.json()['data'])):                sources.append(r.json()['data'][i]['name'])            res = '统一身份认证' in sources and '盐田总管20220531' in sources and '测试应用0510-1' in sources and '危急值管理系统' in sources            self.assertEqual(r.json()['code'], 200)            self.assertTrue(res)        else:            sources = []            for i in range(len(r.json()['data'])):                sources.append(r.json()['data'][i]['name'])            print(sources)            res = '第三方应用088' in sources and '全员人口信息库-三方' in sources and '资源发现-主索引' in sources and '区域公卫协同管理平台' in sources and r.json()['code'] == 200            case_section = '菜单访问日志-查询所有系统,正确'            url_path = '/sys/menuOpLog/findAllSystem'            mail_title_url = 'http://' + self.url + url_path            request_method = 'get'            print(result_buginfo_template(case_section, url, request_method, data, r))            title = mail_buginfo_template(case_section, mail_title_url, request_method, data, r)[0]            content = mail_buginfo_template(case_section, mail_title_url, request_method, data, r)[1]            bug_to_zentao(res, title, content.replace('\'','').replace('"',''), 'zhaop', 'xiaojc')            bug_id = from_zentaotitle_get_zentaoid(title)            title_mail = 'BUG #' + str(bug_id) + ' ' + title            mail_temp = bug_mail_template(str(bug_id), title, content,                                          ['code=' + str(r.json()['code'])],                                          ['code=200'],                                          new_time().split(' ')[0], new_time().split(' ')[1], '禅道管理')            if res == False:                send_email('liny@casking.com.cn', title_mail, mail_temp)            self.assertEqual(r.json()['code'], 200)            self.assertTrue(res)    #站点访问日志查询,正确    def test_siteAccessLoglist_right(self):        token_yaml = sys.path[-1] + '/a_udaam/data/token.yaml'        token = read_yaml(token_yaml, 'token')        # 获取ini中用例        # print(self.case_paramt_ini)        data = self.cf.getini_by_section(self.case_paramt_ini, '站点访问日志查询,正确')        # data1 = json.dumps(json.loads(str(data).replace("'","\"").replace('"null"','null').replace('"true"','true')))        get_parameter = dict_to_get_parameter(data)        url = 'http://' + self.url + '/sys/siteAccessLog/page/list?' + get_parameter        headers = {            'Content-Type': 'application/json',            'Authorization': 'Bearer ' + token        }        r = self.get(url, headers)        log.info(r.text)        res = r.json()['code'] == 200        case_section = '站点访问日志查询,正确'        url_path = '/sys/siteAccessLog/page/list'        mail_title_url = 'http://' + self.url + url_path        request_method = 'get'        print(result_buginfo_template(case_section, url, request_method, data, r))        title = mail_buginfo_template(case_section, mail_title_url, request_method, data, r)[0]        content = mail_buginfo_template(case_section, mail_title_url, request_method, data, r)[1]        bug_to_zentao(res, title, content.replace('\'','').replace('"',''), 'zhaop', 'xiaojc')        bug_id = from_zentaotitle_get_zentaoid(title)        title_mail = 'BUG #' + str(bug_id) + ' ' + title        mail_temp = bug_mail_template(str(bug_id), title, content,                                      ['code=' + str(r.json()['code'])],                                      ['code=200'],                                      new_time().split(' ')[0], new_time().split(' ')[1], '禅道管理')        if res == False:            send_email('liny@casking.com.cn', title_mail, mail_temp)        self.assertEqual(r.json()['code'], 200)        self.assertEqual(r.json()['message'], '成功')        # self.assertEqual(r.json()['data']["content"][0]['systemName'], "田策师")    #站点访问日志查询,未传所有参数    def test_siteAccessLoglist_noallid1(self):        token_yaml = sys.path[-1] + '/a_udaam/data/token.yaml'        token = read_yaml(token_yaml, 'token')        # 获取ini中用例        # print(self.case_paramt_ini)        data = self.cf.getini_by_section(self.case_paramt_ini, '站点访问日志查询,未传所有参数')        # data1 = json.dumps(json.loads(str(data).replace("'","\"").replace('"null"','null').replace('"true"','true')))        get_parameter = dict_to_get_parameter(data)        url = 'http://' + self.url + '/sys/siteAccessLog/page/list?' + get_parameter        headers = {            'Content-Type': 'application/json',            'Authorization': 'Bearer ' + token        }        r = self.get(url, headers)        log.info(r.text)        res = r.json()['code'] == 500        case_section = '站点访问日志查询,未传所有参数'        url_path = '/sys/siteAccessLog/page/list'        mail_title_url = 'http://' + self.url + url_path        request_method = 'get'        print(result_buginfo_template(case_section, url, request_method, data, r))        title = mail_buginfo_template(case_section, mail_title_url, request_method, data, r)[0]        content = mail_buginfo_template(case_section, mail_title_url, request_method, data, r)[1]        bug_to_zentao(res, title, content.replace('\'','').replace('"',''), 'zhaop', 'xiaojc')        bug_id = from_zentaotitle_get_zentaoid(title)        title_mail = 'BUG #' + str(bug_id) + ' ' + title        mail_temp = bug_mail_template(str(bug_id), title, content,                                      ['code=' + str(r.json()['code'])],                                      ['code=500'],                                      new_time().split(' ')[0], new_time().split(' ')[1], '禅道管理')        if res == False:            send_email('liny@casking.com.cn', title_mail, mail_temp)        self.assertEqual(r.json()['code'], 500)        self.assertEqual(r.json()['message'], '请求参数包含非法字符！')        # self.assertEqual(r.json()['data']["content"][0]['userName'], "田策师")    # 站点访问日志查询,未传页码参数    def test_siteAccessLoglist_noallid2(self):        token_yaml = sys.path[-1] + '/a_udaam/data/token.yaml'        token = read_yaml(token_yaml, 'token')        # 获取ini中用例        # print(self.case_paramt_ini)        data = self.cf.getini_by_section(self.case_paramt_ini, '站点访问日志查询,未传页码参数')        # data1 = json.dumps(json.loads(str(data).replace("'","\"").replace('"null"','null').replace('"true"','true')))        get_parameter = dict_to_get_parameter(data)        url = 'http://' + self.url + '/sys/siteAccessLog/page/list?' + get_parameter        headers = {            'Content-Type': 'application/json',            'Authorization': 'Bearer ' + token        }        r = self.get(url, headers)        log.info(r.text)        res = r.json()['code'] == 500        case_section = '站点访问日志查询,未传页码参数'        url_path = '/sys/siteAccessLog/page/list'        mail_title_url = 'http://' + self.url + url_path        request_method = 'get'        print(result_buginfo_template(case_section, url, request_method, data, r))        title = mail_buginfo_template(case_section, mail_title_url, request_method, data, r)[0]        content = mail_buginfo_template(case_section, mail_title_url, request_method, data, r)[1]        bug_to_zentao(res, title, content.replace('\'','').replace('"',''), 'zhaop', 'xiaojc')        bug_id = from_zentaotitle_get_zentaoid(title)        title_mail = 'BUG #' + str(bug_id) + ' ' + title        mail_temp = bug_mail_template(str(bug_id), title, content,                                      ['code=' + str(r.json()['code'])],                                      ['code=500'],                                      new_time().split(' ')[0], new_time().split(' ')[1], '禅道管理')        if res == False:            send_email('liny@casking.com.cn', title_mail, mail_temp)        self.assertEqual(r.json()['code'], 500)        self.assertEqual(r.json()['message'], '请求参数包含非法字符！')        # self.assertEqual(r.json()['data']["content"][0]['userName'], "田策师")    # 站点访问日志查询,未传页码条数参数    def test_siteAccessLoglist_noallid3(self):        token_yaml = sys.path[-1] + '/a_udaam/data/token.yaml'        token = read_yaml(token_yaml, 'token')        # 获取ini中用例        # print(self.case_paramt_ini)        data = self.cf.getini_by_section(self.case_paramt_ini, '站点访问日志查询,未传页码条数参数')        # data1 = json.dumps(json.loads(str(data).replace("'","\"").replace('"null"','null').replace('"true"','true')))        get_parameter = dict_to_get_parameter(data)        url = 'http://' + self.url + '/sys/siteAccessLog/page/list?' + get_parameter        headers = {            'Content-Type': 'application/json',            'Authorization': 'Bearer ' + token        }        r = self.get(url, headers)        log.info(r.text)        res = r.json()['code'] == 500        case_section = '站点访问日志查询,未传页码条数参数'        url_path = '/sys/siteAccessLog/page/list'        mail_title_url = 'http://' + self.url + url_path        request_method = 'get'        print(result_buginfo_template(case_section, url, request_method, data, r))        title = mail_buginfo_template(case_section, mail_title_url, request_method, data, r)[0]        content = mail_buginfo_template(case_section, mail_title_url, request_method, data, r)[1]        bug_to_zentao(res, title, content.replace('\'','').replace('"',''), 'zhaop', 'xiaojc')        bug_id = from_zentaotitle_get_zentaoid(title)        title_mail = 'BUG #' + str(bug_id) + ' ' + title        mail_temp = bug_mail_template(str(bug_id), title, content,                                      ['code=' + str(r.json()['code'])],                                      ['code=500'],                                      new_time().split(' ')[0], new_time().split(' ')[1], '禅道管理')        if res == False:            send_email('liny@casking.com.cn', title_mail, mail_temp)        self.assertEqual(r.json()['code'], 500)        self.assertEqual(r.json()['message'], '请求参数包含非法字符！')        # self.assertEqual(r.json()['data']["content"][0]['userName'], "阿胜")    # 站点访问日志-查询所有系统,正确    def test_siteAccessLoglist_query_all_sys(self):        token_yaml = sys.path[-1] + '/a_udaam/data/token.yaml'        token = read_yaml(token_yaml, 'token')        # 获取ini中用例        # print(self.case_paramt_ini)        data = self.cf.getini_by_section(self.case_paramt_ini, '站点访问日志-查询所有系统,正确')        # data1 = json.dumps(json.loads(str(data).replace("'","\"").replace('"null"','null').replace('"true"','true')))        get_parameter = dict_to_get_parameter(data)        url = 'http://' + self.url + '/sys/siteAccessLog/page/findAllSystem?' + get_parameter        headers = {            'Content-Type': 'application/json',            'Authorization': 'Bearer ' + token        }        r = self.get(url, headers)        log.info(r.text)        if self.url == '192.168.13.159:10041':            sources = []            for i in range(len(r.json()['data'])):                sources.append(r.json()['data'][i]['name'])            res = '测试内部应用' in sources and '统一身份认证' in sources and '危急值管理系统' in sources and '三方应用-001' in sources            self.assertEqual(r.json()['code'], 200)            self.assertTrue(res)        else:            sources = []            for i in range(len(r.json()['data'])):                sources.append(r.json()['data'][i]['name'])            print(sources)            res = '第三方应用088' in sources and '全员人口信息库-三方' in sources and '资源发现-主索引' in sources and '区域公卫协同管理平台' in sources and r.json()['code'] == 200            case_section = '站点访问日志-查询所有系统,正确'            url_path = '/sys/siteAccessLog/page/findAllSystem'            mail_title_url = 'http://' + self.url + url_path            request_method = 'get'            print(result_buginfo_template(case_section, url, request_method, data, r))            title = mail_buginfo_template(case_section, mail_title_url, request_method, data, r)[0]            content = mail_buginfo_template(case_section, mail_title_url, request_method, data, r)[1]            bug_to_zentao(res, title, content.replace('\'','').replace('"',''), 'zhaop', 'xiaojc')            bug_id = from_zentaotitle_get_zentaoid(title)            title_mail = 'BUG #' + str(bug_id) + ' ' + title            mail_temp = bug_mail_template(str(bug_id), title, content,                                          ['code=' + str(r.json()['code'])],                                          ['code=200'],                                          new_time().split(' ')[0], new_time().split(' ')[1], '禅道管理')            if res == False:                send_email('liny@casking.com.cn', title_mail, mail_temp)            self.assertEqual(r.json()['code'], 200)            self.assertTrue(res)    # 站点访问日志-查询所有机构,正确    def test_siteAccessLoglist_query_all_org(self):        token_yaml = sys.path[-1] + '/a_udaam/data/token.yaml'        token = read_yaml(token_yaml, 'token')        # 获取ini中用例        # print(self.case_paramt_ini)        data = self.cf.getini_by_section(self.case_paramt_ini, '站点访问日志-查询所有机构,正确')        # data1 = json.dumps(json.loads(str(data).replace("'","\"").replace('"null"','null').replace('"true"','true')))        get_parameter = dict_to_get_parameter(data)        url = 'http://' + self.url + '/sys/siteAccessLog/page/findAllOrg?' + get_parameter        headers = {            'Content-Type': 'application/json',            'Authorization': 'Bearer ' + token        }        r = self.get(url, headers)        log.info(r.text)        if self.url == '192.168.13.159:10041':            sources = []            for i in range(len(r.json()['data'])):                sources.append(r.json()['data'][i]['name'])            res = '龙岗区协同测试' in sources and '龙岗孕产妇协同' in sources and '龙岗区第三人民医院' in sources and '龙岗三四院' in sources            self.assertEqual(r.json()['code'], 200)            self.assertTrue(res)        else:            sources = []            for i in range(len(r.json()['data'])):                sources.append(r.json()['data'][i]['name'])            print(sources)            res = '深圳市龙岗区中医院' in sources and '深圳市人民医院' in sources and '深圳市' in sources and '龙岗区' in sources and r.json()['code'] == 200            case_section = '站点访问日志-查询所有机构,正确'            url_path = '/sys/siteAccessLog/page/findAllOrg'            mail_title_url = 'http://' + self.url + url_path            request_method = 'get'            print(result_buginfo_template(case_section, url, request_method, data, r))            title = mail_buginfo_template(case_section, mail_title_url, request_method, data, r)[0]            content = mail_buginfo_template(case_section, mail_title_url, request_method, data, r)[1]            bug_to_zentao(res, title, content.replace('\'','').replace('"',''), 'zhaop', 'xiaojc')            bug_id = from_zentaotitle_get_zentaoid(title)            title_mail = 'BUG #' + str(bug_id) + ' ' + title            mail_temp = bug_mail_template(str(bug_id), title, content,                                          ['code=' + str(r.json()['code'])],                                          ['code=200'],                                          new_time().split(' ')[0], new_time().split(' ')[1], '禅道管理')            if res == False:                send_email('liny@casking.com.cn', title_mail, mail_temp)            self.assertEqual(r.json()['code'], 200)            self.assertTrue(res)    #授权操作日志查询,正确    def test_grantOperationLoglist_right(self):        token_yaml = sys.path[-1] + '/a_udaam/data/token.yaml'        token = read_yaml(token_yaml, 'token')        # 获取ini中用例        # print(self.case_paramt_ini)        data = self.cf.getini_by_section(self.case_paramt_ini, '授权操作日志查询,正确')        # data1 = json.dumps(json.loads(str(data).replace("'","\"").replace('"null"','null').replace('"true"','true')))        get_parameter = dict_to_get_parameter(data)        url = 'http://' + self.url + '/sys/grantOperationLog/page/list?' + get_parameter        headers = {            'Content-Type': 'application/json',            'Authorization': 'Bearer ' + token        }        r = self.get(url, headers)        log.info(r.text)        res = r.json()['code'] == 200        case_section = '授权操作日志查询,正确'        url_path = '/sys/grantOperationLog/page/list'        mail_title_url = 'http://' + self.url + url_path        request_method = 'get'        print(result_buginfo_template(case_section, url, request_method, data, r))        title = mail_buginfo_template(case_section, mail_title_url, request_method, data, r)[0]        content = mail_buginfo_template(case_section, mail_title_url, request_method, data, r)[1]        bug_to_zentao(res, title, content.replace('\'','').replace('"',''), 'zhaop', 'xiaojc')        bug_id = from_zentaotitle_get_zentaoid(title)        title_mail = 'BUG #' + str(bug_id) + ' ' + title        mail_temp = bug_mail_template(str(bug_id), title, content,                                      ['code=' + str(r.json()['code'])],                                      ['code=200'],                                      new_time().split(' ')[0], new_time().split(' ')[1], '禅道管理')        if res == False:            send_email('liny@casking.com.cn', title_mail, mail_temp)        self.assertEqual(r.json()['code'], 200)        self.assertEqual(r.json()['message'], '成功')        # self.assertEqual(r.json()['data']["content"][0]['systemName'], "田策师")    #授权操作日志查询,未传所有参数    def test_grantOperationLoglist_noallid1(self):        token_yaml = sys.path[-1] + '/a_udaam/data/token.yaml'        token = read_yaml(token_yaml, 'token')        # 获取ini中用例        # print(self.case_paramt_ini)        data = self.cf.getini_by_section(self.case_paramt_ini, '授权操作日志查询,未传所有参数')        # data1 = json.dumps(json.loads(str(data).replace("'","\"").replace('"null"','null').replace('"true"','true')))        get_parameter = dict_to_get_parameter(data)        url = 'http://' + self.url + '/sys/grantOperationLog/page/list?' + get_parameter        headers = {            'Content-Type': 'application/json',            'Authorization': 'Bearer ' + token        }        r = self.get(url, headers)        log.info(r.text)        res = r.json()['code'] == 500        case_section = '授权操作日志查询,未传所有参数'        url_path = '/sys/grantOperationLog/page/list'        mail_title_url = 'http://' + self.url + url_path        request_method = 'get'        print(result_buginfo_template(case_section, url, request_method, data, r))        title = mail_buginfo_template(case_section, mail_title_url, request_method, data, r)[0]        content = mail_buginfo_template(case_section, mail_title_url, request_method, data, r)[1]        bug_to_zentao(res, title, content.replace('\'','').replace('"',''), 'zhaop', 'xiaojc')        bug_id = from_zentaotitle_get_zentaoid(title)        title_mail = 'BUG #' + str(bug_id) + ' ' + title        mail_temp = bug_mail_template(str(bug_id), title, content,                                      ['code=' + str(r.json()['code'])],                                      ['code=500'],                                      new_time().split(' ')[0], new_time().split(' ')[1], '禅道管理')        if res == False:            send_email('liny@casking.com.cn', title_mail, mail_temp)        self.assertEqual(r.json()['code'], 500)        self.assertEqual(r.json()['message'], '请求参数包含非法字符！')        # self.assertEqual(r.json()['data']["content"][0]['userName'], "田策师")    # 授权操作日志查询,未传页码参数    def test_grantOperationLoglist_noallid2(self):        token_yaml = sys.path[-1] + '/a_udaam/data/token.yaml'        token = read_yaml(token_yaml, 'token')        # 获取ini中用例        # print(self.case_paramt_ini)        data = self.cf.getini_by_section(self.case_paramt_ini, '授权操作日志查询,未传页码参数')        # data1 = json.dumps(json.loads(str(data).replace("'","\"").replace('"null"','null').replace('"true"','true')))        get_parameter = dict_to_get_parameter(data)        url = 'http://' + self.url + '/sys/grantOperationLog/page/list?' + get_parameter        headers = {            'Content-Type': 'application/json',            'Authorization': 'Bearer ' + token        }        r = self.get(url, headers)        log.info(r.text)        res = r.json()['code'] == 500        case_section = '授权操作日志查询,未传页码参数'        url_path = '/sys/grantOperationLog/page/list'        mail_title_url = 'http://' + self.url + url_path        request_method = 'get'        print(result_buginfo_template(case_section, url, request_method, data, r))        title = mail_buginfo_template(case_section, mail_title_url, request_method, data, r)[0]        content = mail_buginfo_template(case_section, mail_title_url, request_method, data, r)[1]        bug_to_zentao(res, title, content.replace('\'','').replace('"',''), 'zhaop', 'xiaojc')        bug_id = from_zentaotitle_get_zentaoid(title)        title_mail = 'BUG #' + str(bug_id) + ' ' + title        mail_temp = bug_mail_template(str(bug_id), title, content,                                      ['code=' + str(r.json()['code'])],                                      ['code=500'],                                      new_time().split(' ')[0], new_time().split(' ')[1], '禅道管理')        if res == False:            send_email('liny@casking.com.cn', title_mail, mail_temp)        self.assertEqual(r.json()['code'], 500)        self.assertEqual(r.json()['message'], '请求参数包含非法字符！')        # self.assertEqual(r.json()['data']["content"][0]['userName'], "田策师")    # 授权操作日志查询,未传页码条数参数    def test_grantOperationLoglist_noallid3(self):        token_yaml = sys.path[-1] + '/a_udaam/data/token.yaml'        token = read_yaml(token_yaml, 'token')        # 获取ini中用例        # print(self.case_paramt_ini)        data = self.cf.getini_by_section(self.case_paramt_ini, '授权操作日志查询,未传页码条数参数')        # data1 = json.dumps(json.loads(str(data).replace("'","\"").replace('"null"','null').replace('"true"','true')))        get_parameter = dict_to_get_parameter(data)        url = 'http://' + self.url + '/sys/grantOperationLog/page/list?' + get_parameter        headers = {            'Content-Type': 'application/json',            'Authorization': 'Bearer ' + token        }        r = self.get(url, headers)        log.info(r.text)        res = r.json()['code'] == 500        case_section = '授权操作日志查询,未传页码条数参数'        url_path = '/sys/grantOperationLog/page/list'        mail_title_url = 'http://' + self.url + url_path        request_method = 'get'        print(result_buginfo_template(case_section, url, request_method, data, r))        title = mail_buginfo_template(case_section, mail_title_url, request_method, data, r)[0]        content = mail_buginfo_template(case_section, mail_title_url, request_method, data, r)[1]        bug_to_zentao(res, title, content.replace('\'','').replace('"',''), 'zhaop', 'xiaojc')        bug_id = from_zentaotitle_get_zentaoid(title)        title_mail = 'BUG #' + str(bug_id) + ' ' + title        mail_temp = bug_mail_template(str(bug_id), title, content,                                      ['code=' + str(r.json()['code'])],                                      ['code=500'],                                      new_time().split(' ')[0], new_time().split(' ')[1], '禅道管理')        if res == False:            send_email('liny@casking.com.cn', title_mail, mail_temp)        self.assertEqual(r.json()['code'], 500)        self.assertEqual(r.json()['message'], '请求参数包含非法字符！')        # self.assertEqual(r.json()['data']["content"][0]['userName'], "阿胜")    #关键操作日志查询,正确    def test_logpagelistlist_right(self):        token_yaml = sys.path[-1] + '/a_udaam/data/token.yaml'        token = read_yaml(token_yaml, 'token')        # 获取ini中用例        # print(self.case_paramt_ini)        data = self.cf.getini_by_section(self.case_paramt_ini, '关键操作日志查询,正确')        # data1 = json.dumps(json.loads(str(data).replace("'","\"").replace('"null"','null').replace('"true"','true')))        get_parameter = dict_to_get_parameter(data)        url = 'http://' + self.url + '/sys/log/page/list?' + get_parameter        headers = {            'Content-Type': 'application/json',            'Authorization': 'Bearer ' + token        }        r = self.get(url, headers)        log.info(r.text)        res = r.json()['code'] == 200        case_section = '关键操作日志查询,正确'        url_path = '/sys/log/page/list'        mail_title_url = 'http://' + self.url + url_path        request_method = 'get'        print(result_buginfo_template(case_section, url, request_method, data, r))        title = mail_buginfo_template(case_section, mail_title_url, request_method, data, r)[0]        content = mail_buginfo_template(case_section, mail_title_url, request_method, data, r)[1]        bug_to_zentao(res, title, content.replace('\'','').replace('"',''), 'zhaop', 'xiaojc')        bug_id = from_zentaotitle_get_zentaoid(title)        title_mail = 'BUG #' + str(bug_id) + ' ' + title        mail_temp = bug_mail_template(str(bug_id), title, content,                                      ['code=' + str(r.json()['code'])],                                      ['code=200'],                                      new_time().split(' ')[0], new_time().split(' ')[1], '禅道管理')        if res == False:            send_email('liny@casking.com.cn', title_mail, mail_temp)        self.assertEqual(r.json()['code'], 200)        self.assertEqual(r.json()['message'], '成功')        # self.assertEqual(r.json()['data']["content"][0]['systemName'], "田策师")    #关键操作日志查询,未传所有参数    def test_logpagelistlist_noallid1(self):        token_yaml = sys.path[-1] + '/a_udaam/data/token.yaml'        token = read_yaml(token_yaml, 'token')        # 获取ini中用例        # print(self.case_paramt_ini)        data = self.cf.getini_by_section(self.case_paramt_ini, '关键操作日志查询,未传所有参数')        # data1 = json.dumps(json.loads(str(data).replace("'","\"").replace('"null"','null').replace('"true"','true')))        get_parameter = dict_to_get_parameter(data)        url = 'http://' + self.url + '/sys/log/page/list?' + get_parameter        headers = {            'Content-Type': 'application/json',            'Authorization': 'Bearer ' + token        }        r = self.get(url, headers)        log.info(r.text)        res = r.json()['code'] == 500        case_section = '关键操作日志查询,未传所有参数'        url_path = '/sys/log/page/list'        mail_title_url = 'http://' + self.url + url_path        request_method = 'get'        print(result_buginfo_template(case_section, url, request_method, data, r))        title = mail_buginfo_template(case_section, mail_title_url, request_method, data, r)[0]        content = mail_buginfo_template(case_section, mail_title_url, request_method, data, r)[1]        bug_to_zentao(res, title, content.replace('\'','').replace('"',''), 'zhaop', 'xiaojc')        bug_id = from_zentaotitle_get_zentaoid(title)        title_mail = 'BUG #' + str(bug_id) + ' ' + title        mail_temp = bug_mail_template(str(bug_id), title, content,                                      ['code=' + str(r.json()['code'])],                                      ['code=500'],                                      new_time().split(' ')[0], new_time().split(' ')[1], '禅道管理')        if res == False:            send_email('liny@casking.com.cn', title_mail, mail_temp)        self.assertEqual(r.json()['code'], 500)        self.assertEqual(r.json()['message'], '请求参数包含非法字符！')        # self.assertEqual(r.json()['data']["content"][0]['userName'], "田策师")    # 关键操作日志查询,未传页码参数    def test_logpagelist_noallid2(self):        token_yaml = sys.path[-1] + '/a_udaam/data/token.yaml'        token = read_yaml(token_yaml, 'token')        # 获取ini中用例        # print(self.case_paramt_ini)        data = self.cf.getini_by_section(self.case_paramt_ini, '关键操作日志查询,未传页码参数')        # data1 = json.dumps(json.loads(str(data).replace("'","\"").replace('"null"','null').replace('"true"','true')))        get_parameter = dict_to_get_parameter(data)        url = 'http://' + self.url + '/sys/log/page/list?' + get_parameter        headers = {            'Content-Type': 'application/json',            'Authorization': 'Bearer ' + token        }        r = self.get(url, headers)        log.info(r.text)        res = r.json()['code'] == 500        case_section = '关键操作日志查询,未传页码参数'        url_path = '/sys/log/page/list'        mail_title_url = 'http://' + self.url + url_path        request_method = 'get'        print(result_buginfo_template(case_section, url, request_method, data, r))        title = mail_buginfo_template(case_section, mail_title_url, request_method, data, r)[0]        content = mail_buginfo_template(case_section, mail_title_url, request_method, data, r)[1]        bug_to_zentao(res, title, content.replace('\'','').replace('"',''), 'zhaop', 'xiaojc')        bug_id = from_zentaotitle_get_zentaoid(title)        title_mail = 'BUG #' + str(bug_id) + ' ' + title        mail_temp = bug_mail_template(str(bug_id), title, content,                                      ['code=' + str(r.json()['code'])],                                      ['code=500'],                                      new_time().split(' ')[0], new_time().split(' ')[1], '禅道管理')        if res == False:            send_email('liny@casking.com.cn', title_mail, mail_temp)        self.assertEqual(r.json()['code'], 500)        self.assertEqual(r.json()['message'], '请求参数包含非法字符！')        # self.assertEqual(r.json()['data']["content"][0]['userName'], "田策师")    # 关键操作日志查询,未传页码条数参数    def test_logpagelist_noallid3(self):        token_yaml = sys.path[-1] + '/a_udaam/data/token.yaml'        token = read_yaml(token_yaml, 'token')        # 获取ini中用例        # print(self.case_paramt_ini)        data = self.cf.getini_by_section(self.case_paramt_ini, '关键操作日志查询,未传页码条数参数')        # data1 = json.dumps(json.loads(str(data).replace("'","\"").replace('"null"','null').replace('"true"','true')))        get_parameter = dict_to_get_parameter(data)        url = 'http://' + self.url + '/sys/log/page/list?' + get_parameter        headers = {            'Content-Type': 'application/json',            'Authorization': 'Bearer ' + token        }        r = self.get(url, headers)        log.info(r.text)        res = r.json()['code'] == 200        case_section = '关键操作日志查询,未传页码条数参数'        url_path = '/sys/log/page/list'        mail_title_url = 'http://' + self.url + url_path        request_method = 'get'        print(result_buginfo_template(case_section, url, request_method, data, r))        title = mail_buginfo_template(case_section, mail_title_url, request_method, data, r)[0]        content = mail_buginfo_template(case_section, mail_title_url, request_method, data, r)[1]        bug_to_zentao(res, title, content.replace('\'','').replace('"',''), 'zhaop', 'xiaojc')        bug_id = from_zentaotitle_get_zentaoid(title)        title_mail = 'BUG #' + str(bug_id) + ' ' + title        mail_temp = bug_mail_template(str(bug_id), title, content,                                      ['code=' + str(r.json()['code'])],                                      ['code=200'],                                      new_time().split(' ')[0], new_time().split(' ')[1], '禅道管理')        if res == False:            send_email('liny@casking.com.cn', title_mail, mail_temp)        self.assertEqual(r.json()['code'], 200)