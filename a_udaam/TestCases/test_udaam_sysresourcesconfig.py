# -- coding: utf-8 --# @Author : tianxh# @Email : tianxh@casking.com.cnfrom Utils.page import *from Utils.dicttogetparameter import *from Basepage.unittestChushihua import TestApifrom Utils.operationyaml import *from Utils.operationini import Conffrom Utils.operationini import *from Utils.log import *from Utils.send_email import *from Utils.operation_zentao_mysql import *from Utils.all_style_template import *from Utils.currenttime import *import jsonfrom Utils.connectMysql import ConnectMysqlfrom Utils.encrypt import *from Utils.currenttime import *import sys,ossys.path.append((os.path.abspath(os.path.join(os.path.dirname(__file__), '../'))))class Test_sysresourcesconfig(TestApi,Helper):    # 获取服务器地址,,,    url = read_yaml(sys.path[-1] + '/data/server_address.yaml', 'url')    case_paramt_ini = sys.path[-1] + '/data/case_parameters.ini'    cf = Conf    #系统资源配置查询,错误    def test_sysresourcesconfig_search_wrong(self):        token_yaml = sys.path[-1] + '/a_udaam/data/token.yaml'        token = read_yaml(token_yaml, 'token')        # 获取ini中用例        # print(self.case_paramt_ini)        data = self.cf.getini_by_section(self.case_paramt_ini, '系统资源配置查询,错误')        # data1 = json.dumps(json.loads(str(data).replace("'","\"").replace('"null"','null').replace('"true"','true')))        get_parameter = dict_to_get_parameter(data)        url = 'http://' + self.url + '/sys/sysresourcesconfig/list?' + get_parameter        headers = {            'Content-Type': 'application/json',            'Authorization': 'Bearer ' + token        }        r = self.get(url, headers)        log.info(r.text)        exp_mes = '请求参数包含非法字符！'        res = r.json()['code'] == 500 and r.json()['message'] == exp_mes        case_section = '系统资源配置查询,错误'        url_path = '/sys/sysresourcesconfig/list'        mail_title_url = 'http://' + self.url + url_path        request_method = 'get'        print(result_buginfo_template(case_section, url, request_method, data, r))        title = mail_buginfo_template(case_section, mail_title_url, request_method, data, r)[0]        content = mail_buginfo_template(case_section, mail_title_url, request_method, data, r)[1]        bug_to_zentao(res, title, content.replace('\'','').replace('"',''), 'zhaop', 'xiaojc')        bug_id = from_zentaotitle_get_zentaoid(title)        title_mail = 'BUG #' + str(bug_id) + ' ' + title        mail_temp = bug_mail_template(str(bug_id), title, content,                                      ['code=' + str(r.json()['code']), r.json()['message']],                                      ['code=500', exp_mes],                                      new_time().split(' ')[0], new_time().split(' ')[1], '禅道管理')        if res == False:            send_email('liny@casking.com.cn', title_mail, mail_temp)        self.assertEqual(r.json()['code'], 500)        self.assertEqual(r.json()['message'], exp_mes)        # self.assertEqual(r.json()['data']["content"][1]['enable'], False)    #系统资源配置查询，参数未传    def test_sysresourcesconfig_search_wrong1(self):        token_yaml = sys.path[-1] + '/a_udaam/data/token.yaml'        token = read_yaml(token_yaml, 'token')        # 获取ini中用例        # print(self.case_paramt_ini)        data = self.cf.getini_by_section(self.case_paramt_ini, '系统资源配置查询,参数未传')        # data1 = json.dumps(json.loads(str(data).replace("'","\"").replace('"null"','null').replace('"true"','true')))        get_parameter = dict_to_get_parameter(data)        url = 'http://' + self.url + '/sys/sysresourcesconfig/list?' + get_parameter        headers = {            'Content-Type': 'application/json',            'Authorization': 'Bearer ' + token        }        r = self.get(url, headers)        log.info(r.text)        exp_mes = '请求参数包含非法字符！'        res = r.json()['code'] == 500 and r.json()['message'] == exp_mes        case_section = '系统资源配置查询,参数未传'        url_path = '/sys/sysresourcesconfig/list'        mail_title_url = 'http://' + self.url + url_path        request_method = 'get'        print(result_buginfo_template(case_section, url, request_method, data, r))        title = mail_buginfo_template(case_section, mail_title_url, request_method, data, r)[0]        content = mail_buginfo_template(case_section, mail_title_url, request_method, data, r)[1]        bug_to_zentao(res, title, content.replace('\'','').replace('"',''), 'zhaop', 'xiaojc')        bug_id = from_zentaotitle_get_zentaoid(title)        title_mail = 'BUG #' + str(bug_id) + ' ' + title        mail_temp = bug_mail_template(str(bug_id), title, content,                                      ['code=' + str(r.json()['code']), r.json()['message']],                                      ['code=500', exp_mes],                                      new_time().split(' ')[0], new_time().split(' ')[1], '禅道管理')        if res == False:            send_email('liny@casking.com.cn', title_mail, mail_temp)        self.assertEqual(r.json()['code'], 500)        self.assertEqual(r.json()['message'], '请求参数包含非法字符！')        # # self.assertEqual(r.json()['data']["content"][1]['enable'], False)    #系统资源配置新增,正确    def test_sysresourcesconfig_add_right(self):        token_yaml = sys.path[-1] + '/a_udaam/data/token.yaml'        token = read_yaml(token_yaml, 'token')        # 获取ini中用例        # print(self.case_paramt_ini)        data = self.cf.getini_by_section(self.case_paramt_ini, '系统资源配置新增,正确')        data1 = json.dumps(json.loads(str(data).replace("'","\"").replace('"null"','null').replace('"true"','true')))        get_parameter = dict_to_get_parameter(data)        url = 'http://' + self.url + '/sys/sysresourcesconfig/save'        headers = {            'Content-Type': 'application/json',            'Authorization': 'Bearer ' + token        }        r = self.post(url,data1, headers)        log.info(r.text)        res = r.json()['code'] == 200        case_section = '系统资源配置新增,正确'        url_path = '/sys/sysresourcesconfig/save'        mail_title_url = 'http://' + self.url + url_path        request_method = 'post'        print(result_buginfo_template(case_section, url, request_method, data, r))        title = mail_buginfo_template(case_section, mail_title_url, request_method, data, r)[0]        content = mail_buginfo_template(case_section, mail_title_url, request_method, data, r)[1]        bug_to_zentao(res, title, content.replace('\'','').replace('"',''), 'zhaop', 'xiaojc')        bug_id = from_zentaotitle_get_zentaoid(title)        title_mail = 'BUG #' + str(bug_id) + ' ' + title        mail_temp = bug_mail_template(str(bug_id), title, content,                                      ['code=' + str(r.json()['code'])],                                      ['code=200'],                                      new_time().split(' ')[0], new_time().split(' ')[1], '禅道管理')        if res == False:            send_email('liny@casking.com.cn', title_mail, mail_temp)        self.assertEqual(r.json()['code'], 200)        #获取[系统资源配置新增,正确]的code写到[系统资源配置查询,正确]dcode中        add_platrole_name = self.cf.getini_by_option(self.case_paramt_ini,'系统资源配置新增,正确','code')        self.cf.put_ini(self.case_paramt_ini,'系统资源配置查询,正确','code',add_platrole_name)        log.info('系统资源配置新增,正确')        time.sleep(3)    # 系统资源配置查询,正确    def test_sysresourcesconfig_search(self):        token_yaml = sys.path[-1] + '/a_udaam/data/token.yaml'        token = read_yaml(token_yaml, 'token')        # 获取ini中用例        # print(self.case_paramt_ini)        # 获取[系统资源配置新增,正确]code值写到[系统资源配置查询,正确]code中        add_syssour_code = self.cf.getini_by_option(self.case_paramt_ini, '系统资源配置新增,正确', 'code')        self.cf.put_ini(self.case_paramt_ini, '系统资源配置查询,正确', 'code', add_syssour_code)        data = self.cf.getini_by_section(self.case_paramt_ini, '系统资源配置查询,正确')        # data1 = json.dumps(json.loads(str(data).replace("'","\"").replace('"null"','null').replace('"true"','true')))        get_parameter = dict_to_get_parameter(data)        url = 'http://' + self.url + '/sys/sysresourcesconfig/list?' + get_parameter        headers = {            'Content-Type': 'application/json',            'Authorization': 'Bearer ' + token        }        r = self.get(url, headers)        log.info(r.text)        res = r.json()['code'] == 200        case_section = '系统资源配置查询,正确'        url_path = '/sys/sysresourcesconfig/list'        mail_title_url = 'http://' + self.url + url_path        request_method = 'get'        print(result_buginfo_template(case_section, url, request_method, data, r))        title = mail_buginfo_template(case_section, mail_title_url, request_method, data, r)[0]        content = mail_buginfo_template(case_section, mail_title_url, request_method, data, r)[1]        bug_to_zentao(res, title, content.replace('\'','').replace('"',''), 'zhaop', 'xiaojc')        bug_id = from_zentaotitle_get_zentaoid(title)        title_mail = 'BUG #' + str(bug_id) + ' ' + title        mail_temp = bug_mail_template(str(bug_id), title, content,                                      ['code=' + str(r.json()['code'])],                                      ['code=200'],                                      new_time().split(' ')[0], new_time().split(' ')[1], '禅道管理')        if res == False:            send_email('liny@casking.com.cn', title_mail, mail_temp)        self.assertEqual(r.json()['code'], 200)        self.assertEqual(r.json()['message'], '成功')        # self.assertEqual(r.json()['data']["content"][1]['enable'], True)        # 将id值写到[系统资源配置删除,正确]的id中        self.cf.put_ini(self.case_paramt_ini, '系统资源配置删除,正确', 'id', r.json()['data']['content'][0]['id'])    #系统资源配置新增,编码存在    def test_sysresourcesconfig_add_wrong1(self):        token_yaml = sys.path[-1] + '/a_udaam/data/token.yaml'        token = read_yaml(token_yaml, 'token')        # 获取ini中用例        # print(self.case_paramt_ini)        data = self.cf.getini_by_section(self.case_paramt_ini, '系统资源配置新增,编码存在')        data1 = json.dumps(json.loads(str(data).replace("'","\"").replace('"null"','null').replace('"true"','true')))        get_parameter = dict_to_get_parameter(data)        url = 'http://' + self.url + '/sys/sysresourcesconfig/save'        headers = {            'Content-Type': 'application/json',            'Authorization': 'Bearer ' + token        }        r = self.post(url,data1, headers)        log.info(r.text)        exp_mes = '编码不能重复'        res = r.json()['code'] == 101080 and r.json()['message'] == exp_mes        case_section = '系统资源配置新增,编码存在'        url_path = '/sys/sysresourcesconfig/save'        mail_title_url = 'http://' + self.url + url_path        request_method = 'post'        print(result_buginfo_template(case_section, url, request_method, data, r))        title = mail_buginfo_template(case_section, mail_title_url, request_method, data, r)[0]        content = mail_buginfo_template(case_section, mail_title_url, request_method, data, r)[1]        bug_to_zentao(res, title, content.replace('\'','').replace('"',''), 'zhaop', 'xiaojc')        bug_id = from_zentaotitle_get_zentaoid(title)        title_mail = 'BUG #' + str(bug_id) + ' ' + title        mail_temp = bug_mail_template(str(bug_id), title, content,                                      ['code=' + str(r.json()['code']),r.json()['message']],                                      ['code=101080',exp_mes],                                      new_time().split(' ')[0], new_time().split(' ')[1], '禅道管理')        if res == False:            send_email('liny@casking.com.cn', title_mail, mail_temp)        self.assertEqual(r.json()['code'], 101080)        self.assertEqual(r.json()['message'], exp_mes)        # # self.assertEqual(r.json()['data']["content"][1]['enable'], False)    #系统资源配置新增,未传编码    def test_sysresourcesconfig_add_wrong2(self):        token_yaml = sys.path[-1] + '/a_udaam/data/token.yaml'        token = read_yaml(token_yaml, 'token')        # 获取ini中用例        # print(self.case_paramt_ini)        data = self.cf.getini_by_section(self.case_paramt_ini, '系统资源配置新增,未传编码')        data1 = json.dumps(json.loads(str(data).replace("'","\"").replace('"null"','null').replace('"true"','true')))        get_parameter = dict_to_get_parameter(data)        url = 'http://' + self.url + '/sys/sysresourcesconfig/save'        headers = {            'Content-Type': 'application/json',            'Authorization': 'Bearer ' + token        }        r = self.post(url,data1, headers)        log.info(r.text)        exp_mes = '项目编码不能为空'        res = r.json()['code'] != 200 and r.json()['message'] == exp_mes        case_section = '系统资源配置新增,未传编码'        url_path = '/sys/sysresourcesconfig/save'        mail_title_url = 'http://' + self.url + url_path        request_method = 'post'        print(result_buginfo_template(case_section, url, request_method, data, r))        title = mail_buginfo_template(case_section, mail_title_url, request_method, data, r)[0]        content = mail_buginfo_template(case_section, mail_title_url, request_method, data, r)[1]        bug_to_zentao(res, title, content.replace('\'','').replace('"',''), 'zhaop', 'xiaojc')        bug_id = from_zentaotitle_get_zentaoid(title)        title_mail = 'BUG #' + str(bug_id) + ' ' + title        mail_temp = bug_mail_template(str(bug_id), title, content,                                      ['code=' + str(r.json()['code']), r.json()['message']],                                      ['code=101080', exp_mes],                                      new_time().split(' ')[0], new_time().split(' ')[1], '禅道管理')        if res == False:            send_email('liny@casking.com.cn', title_mail, mail_temp)        self.assertNotEqual(r.json()['code'], 200)        self.assertEqual(r.json()['message'], exp_mes)        # # self.assertEqual(r.json()['data']["content"][1]['enable'], False)    #系统资源配置新增,未传端口    def test_sysresourcesconfig_add_wrong3(self):        token_yaml = sys.path[-1] + '/a_udaam/data/token.yaml'        token = read_yaml(token_yaml, 'token')        # 获取ini中用例        data = self.cf.getini_by_section(self.case_paramt_ini, '系统资源配置新增,未传端口')        data1 = json.dumps(json.loads(str(data).replace("'","\"").replace('"null"','null').replace('"true"','true')))        get_parameter = dict_to_get_parameter(data)        url = 'http://' + self.url + '/sys/sysresourcesconfig/save'        headers = {            'Content-Type': 'application/json',            'Authorization': 'Bearer ' + token        }        r = self.post(url,data1, headers)        log.info(r.text)        exp_mes = '项目端口不能为空'        res = r.json()['code'] != 200 and r.json()['message'] == exp_mes        case_section = '系统资源配置新增,未传端口'        url_path = '/sys/sysresourcesconfig/save'        mail_title_url = 'http://' + self.url + url_path        request_method = 'post'        print(result_buginfo_template(case_section, url, request_method, data, r))        title = mail_buginfo_template(case_section, mail_title_url, request_method, data, r)[0]        content = mail_buginfo_template(case_section, mail_title_url, request_method, data, r)[1]        bug_to_zentao(res, title, content.replace('\'','').replace('"',''), 'zhaop', 'xiaojc')        bug_id = from_zentaotitle_get_zentaoid(title)        title_mail = 'BUG #' + str(bug_id) + ' ' + title        mail_temp = bug_mail_template(str(bug_id), title, content,                                      ['code=' + str(r.json()['code']), r.json()['message']],                                      ['code=101080', exp_mes],                                      new_time().split(' ')[0], new_time().split(' ')[1], '禅道管理')        if res == False:            send_email('liny@casking.com.cn', title_mail, mail_temp)        self.assertNotEqual(r.json()['code'], 200)        self.assertEqual(r.json()['message'], exp_mes)        # # self.assertEqual(r.json()['data']["content"][1]['enable'], False)    #系统资源配置更新，正确    def test_sysresourcesconfig_update_right(self):        token_yaml = sys.path[-1] + '/a_udaam/data/token.yaml'        token = read_yaml(token_yaml, 'token')        #获取[系统资源配置新增,正确]的code进行修改后写到[系统资源配置更新,正确]code中        add_syssour_code = self.cf.getini_by_option(self.case_paramt_ini,'系统资源配置新增,正确','code')        self.cf.put_ini(self.case_paramt_ini,'系统资源配置更新,正确','code',add_syssour_code+'ud')        data = self.cf.getini_by_section(self.case_paramt_ini, '系统资源配置更新,正确')        data1 = json.dumps(json.loads(str(data).replace("'", "\"").replace('"null"', 'null').replace('"true"', 'true')))        get_parameter = dict_to_get_parameter(data)        url = 'http://' + self.url + '/sys/sysresourcesconfig/update'        headers = {            'Content-Type': 'application/json',            'Authorization': 'Bearer ' + token        }        r = self.post(url, data1, headers)        log.info(r.text)        res = r.json()['code'] == 200        case_section = '系统资源配置更新,正确'        url_path = '/sys/sysresourcesconfig/update'        mail_title_url = 'http://' + self.url + url_path        request_method = 'post'        print(result_buginfo_template(case_section, url, request_method, data, r))        title = mail_buginfo_template(case_section, mail_title_url, request_method, data, r)[0]        content = mail_buginfo_template(case_section, mail_title_url, request_method, data, r)[1]        bug_to_zentao(res, title, content.replace('\'','').replace('"',''), 'zhaop', 'xiaojc')        bug_id = from_zentaotitle_get_zentaoid(title)        title_mail = 'BUG #' + str(bug_id) + ' ' + title        mail_temp = bug_mail_template(str(bug_id), title, content,                                      ['code=' + str(r.json()['code'])],                                      ['code=200'],                                      new_time().split(' ')[0], new_time().split(' ')[1], '禅道管理')        if res == False:            send_email('liny@casking.com.cn', title_mail, mail_temp)        self.assertEqual(r.json()['code'], 200)        self.assertEqual(r.json()['message'], '成功')        # # self.assertEqual(r.json()['data']["content"][1]['enable'], False)    #系统资源配置更新,编码为空    def test_sysresourcesconfig_update_wrong(self):        token_yaml = sys.path[-1] + '/a_udaam/data/token.yaml'        token = read_yaml(token_yaml, 'token')        # 获取ini中用例        # print(self.case_paramt_ini)        data = self.cf.getini_by_section(self.case_paramt_ini, '系统资源配置更新,编码为空')        data1 = json.dumps(json.loads(str(data).replace("'", "\"").replace('"null"', 'null').replace('"true"', 'true')))        get_parameter = dict_to_get_parameter(data)        url = 'http://' + self.url + '/sys/sysresourcesconfig/update'        headers = {            'Content-Type': 'application/json',            'Authorization': 'Bearer ' + token        }        r = self.post(url, data1, headers)        log.info(r.text)        res = r.json()['code'] != 200        case_section = '系统资源配置更新,编码为空'        url_path = '/sys/sysresourcesconfig/update'        mail_title_url = 'http://' + self.url + url_path        request_method = 'post'        print(result_buginfo_template(case_section, url, request_method, data, r))        title = mail_buginfo_template(case_section, mail_title_url, request_method, data, r)[0]        content = mail_buginfo_template(case_section, mail_title_url, request_method, data, r)[1]        bug_to_zentao(res, title, content.replace('\'','').replace('"',''), 'zhaop', 'xiaojc')        bug_id = from_zentaotitle_get_zentaoid(title)        title_mail = 'BUG #' + str(bug_id) + ' ' + title        mail_temp = bug_mail_template(str(bug_id), title, content,                                      ['code=' + str(r.json()['code'])],                                      ['code=200'],                                      new_time().split(' ')[0], new_time().split(' ')[1], '禅道管理')        if res == False:            send_email('liny@casking.com.cn', title_mail, mail_temp)        # self.assertEqual(r.json()['code'], 200)        # self.assertEqual(r.json()['message'], '项目端口不能为空')        # # self.assertEqual(r.json()['data']["content"][1]['enable'], False)    #系统资源配置删除,正确    def test_sysresourcesconfig_delete_right(self):        # sql = "delete from tb_sysresources_config where code='dgerger'"        # connect = ConnectMysql()        # results = connect.change_data(sql)        token_yaml = sys.path[-1] + '/a_udaam/data/token.yaml'        token = read_yaml(token_yaml, 'token')        # 获取ini中用例        data = self.cf.getini_by_option(self.case_paramt_ini, '系统资源配置删除,正确', 'id')        # get_parameter = dict_to_get_parameter(data)        url = 'http://' + self.url + '/sys/sysresourcesconfig/delete/' + data        headers = {            'Content-Type': 'application/json',            'Authorization': 'Bearer ' + token        }        r = self.post(url, {},headers)        log.info(r.text)        res = r.json()['code'] == 200        case_section = '系统资源配置删除,正确'        url_path = '/sys/sysresourcesconfig/delete/'        mail_title_url = 'http://' + self.url + url_path        request_method = 'post'        print(result_buginfo_template(case_section, url, request_method, data, r))        title = mail_buginfo_template(case_section, mail_title_url, request_method, data, r)[0]        content = mail_buginfo_template(case_section, mail_title_url, request_method, data, r)[1]        bug_to_zentao(res, title, content.replace('\'','').replace('"',''), 'zhaop', 'xiaojc')        bug_id = from_zentaotitle_get_zentaoid(title)        title_mail = 'BUG #' + str(bug_id) + ' ' + title        mail_temp = bug_mail_template(str(bug_id), title, content,                                      ['code=' + str(r.json()['code'])],                                      ['code=200'],                                      new_time().split(' ')[0], new_time().split(' ')[1], '禅道管理')        if res == False:            send_email('liny@casking.com.cn', title_mail, mail_temp)        self.assertEqual(r.json()['code'], 200)        self.assertEqual(r.json()['message'], '成功')   #系统资源配置删除,错误    def test_sysresourcesconfig_delete_wrong(self):        token_yaml = sys.path[-1] + '/a_udaam/data/token.yaml'        token = read_yaml(token_yaml, 'token')        # 获取ini中用例        data = self.cf.getini_by_option(self.case_paramt_ini, '系统资源配置删除,错误', 'id')        # get_parameter = dict_to_get_parameter(data)        url = 'http://' + self.url + '/sys/sysresourcesconfig/delete/' + data        headers = {            'Content-Type': 'application/json',            'Authorization': 'Bearer ' + token        }        r = self.post(url, {},headers)        log.info(r.text)        res = r.json()['code'] == 200        case_section = '系统资源配置删除,错误'        url_path = '/sys/sysresourcesconfig/delete/'        mail_title_url = 'http://' + self.url + url_path        request_method = 'post'        print(result_buginfo_template(case_section, url, request_method, data, r))        title = mail_buginfo_template(case_section, mail_title_url, request_method, data, r)[0]        content = mail_buginfo_template(case_section, mail_title_url, request_method, data, r)[1]        bug_to_zentao(res, title, content.replace('\'','').replace('"',''), 'zhaop', 'xiaojc')        bug_id = from_zentaotitle_get_zentaoid(title)        title_mail = 'BUG #' + str(bug_id) + ' ' + title        mail_temp = bug_mail_template(str(bug_id), title, content,                                      ['code=' + str(r.json()['code'])],                                      ['code=200'],                                      new_time().split(' ')[0], new_time().split(' ')[1], '禅道管理')        if res == False:            send_email('liny@casking.com.cn', title_mail, mail_temp)        self.assertEqual(r.json()['code'], 200)        self.assertEqual(r.json()['message'], '成功')