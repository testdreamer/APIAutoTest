#-- coding: utf-8 --#@Time : 2022/6/8 16:36#@Author : tianxh#@Email : tianxh@casking.com.cn#@File : test_udaam_applicationclassification.py#@Software: PyCharmfrom Utils.page import *from Utils.dicttogetparameter import *from Basepage.unittestChushihua import TestApifrom Utils.operationyaml import *from Utils.operationini import Conffrom Utils.operationini import *from Utils.log import *from Utils.currenttime import *import jsonfrom Utils.send_email import *from Utils.encrypt import *from Utils.currenttime import *from Utils.connectMysql import ConnectMysqlfrom Utils.operation_zentao_mysql import *from Utils.all_style_template import *import sys,ossys.path.append((os.path.abspath(os.path.join(os.path.dirname(__file__), '../'))))class ApplicationClassification(TestApi,Helper):    # 获取服务器地址,,,    url = read_yaml(sys.path[-1] + '/data/server_address.yaml', 'url')    case_paramt_ini = sys.path[-1] + '/data/case_parameters.ini'    case_paramt_ide_ini = sys.path[-1] + '/data/case_parameters_ide.ini'    cf = Conf    '''           应用分类树查询,正确    '''    def test_app_classify_tree_query(self):        # 获取ini中用例        data = self.cf.getini_by_section(self.case_paramt_ini, '应用分类树查询,正确')        data1 = json.dumps(json.loads(str(data).replace("'","\"").replace('"null"','null').replace('"true"','true')))        get_parameter = dict_to_get_parameter(data)        token_yaml = sys.path[-1] + '/a_udaam/data/token.yaml'        token = read_yaml(token_yaml, 'token')        url = 'http://' + self.url + '/sys/appType/loadAppTypeTree?' + get_parameter        headers = {            'Content-Type': 'application/json',            'Authorization': 'Bearer ' + token        }        r = self.get(url, headers)        log.info(r.text)        if self.url == '192.168.13.159:10041':            sources = []            for i in range(len(r.json()['data'])):                sources.append(r.json()['data'][i]['typeName'])            print(sources)            result = ('测试分类czw' in sources and                      '测试分类04211436' in sources and                      '测试分类20220507' in sources and                      'typeName1' in sources and                      '皇家联影' in sources and                      '测试分类udcms' in sources and                      '测试分类 udemr' in sources                      )        else:            sources = []            for i in range(len(r.json()['data'])):                sources.append(r.json()['data'][i]['typeName'])            print(sources)            result = ['数据共享发布','院内平台','演示环境','数据质量管理系统','电子病历调阅系统','大鹏新区应用']        res = r.json()['code'] == 200 and set(result) <= set(sources)        case_section = '应用分类树查询,正确'        url_path = '/sys/appType/loadAppTypeTree'        mail_title_url = 'http://' + self.url + url_path        request_method = 'get'        print(result_buginfo_template(case_section, url, request_method, data1, r))        title = mail_buginfo_template(case_section, mail_title_url, request_method, data1, r)[0]        content = mail_buginfo_template(case_section, mail_title_url, request_method, data1, r)[1]        bug_to_zentao(res, title, content.replace('\'','').replace('"',''), 'zhaop', 'xiaojc')        bug_id = from_zentaotitle_get_zentaoid(title)        title_mail = 'BUG #'+str(bug_id)+' '+title        mail_temp = bug_mail_template(str(bug_id), title, content, ['code='+str(r.json()['code']),sources], ['code=200',result],                                      new_time().split(' ')[0], new_time().split(' ')[1], '禅道管理')        if res == False:            send_email('liny@casking.com.cn', title_mail, mail_temp)        self.assertEqual(r.json()['code'], 200)        self.assertEqual(r.json()['message'], '成功')        self.assertTrue(res)        #获取第一个分类树的id,写到ini文件的[应用分类新增,正确]的pid,[应用分类查询,正确]的pid        self.cf.put_ini(self.case_paramt_ini,'应用分类新增,正确','pid',r.json()['data'][0]['id'])        self.cf.put_ini(self.case_paramt_ini, '应用分类查询,正确', 'pid', r.json()['data'][0]['id'])        self.cf.put_ini(self.case_paramt_ini, '应用分类修改,正确', 'pid', r.json()['data'][0]['id'])        log.info('应用分类树查询,正确')        time.sleep(1)    """       应用分类新增,正确    """    def test_app_classifi_insert(self):        #随机生成应用分类typeName,typeCode写到[应用分类新增,正确]typeName,typeCode中        self.cf.put_ini(self.case_paramt_ini, '应用分类新增,正确','typeName',str(get_time()))        self.cf.put_ini(self.case_paramt_ini, '应用分类新增,正确', 'typeCode', str(get_time()))        # 获取ini中用例        data = self.cf.getini_by_section(self.case_paramt_ini, '应用分类新增,正确')        data1 = json.dumps(json.loads(str(data).replace("'", "\"").replace('"null"', 'null').replace('"true"', 'true')))        get_parameter = dict_to_get_parameter(data)        url = 'http://' + self.url + '/sys/appType/manage/add'        token_yaml = sys.path[-1] + '/a_udaam/data/token.yaml'        token = read_yaml(token_yaml, 'token')        headers = {            'Content-Type': 'application/json',            'Authorization': 'Bearer ' + token        }        r = self.post(url, data1, headers)        res = r.json()['code'] == 200        case_section = '应用分类新增,正确'        url_path = '/sys/appType/manage/add'        mail_title_url = 'http://' + self.url + url_path        request_method = 'post'        print(result_buginfo_template(case_section, url, request_method, data1, r))        title = mail_buginfo_template(case_section, mail_title_url, request_method, data1, r)[0]        content = mail_buginfo_template(case_section, mail_title_url, request_method, data1, r)[1]        bug_to_zentao(res, title, content.replace('\'','').replace('"',''), 'zhaop', 'xiaojc')        bug_id = from_zentaotitle_get_zentaoid(title)        title_mail = 'BUG #' + str(bug_id) + ' ' + title        mail_temp = bug_mail_template(str(bug_id), title, content, ['code='+str(r.json()['code'])], ['code=200'],                                      new_time().split(' ')[0], new_time().split(' ')[1], '禅道管理')        if res == False:            send_email('liny@casking.com.cn', title_mail, mail_temp)        self.assertEqual(r.json()['code'], 200)        self.assertEqual(r.json()['message'], '成功')        #获取id写到[应用分类修改,正确]的id中        self.cf.put_ini(self.case_paramt_ini,'应用分类修改,正确','id',r.json()['data'])        # 获取id写到[应用分类删除,正确]的id中        self.cf.put_ini(self.case_paramt_ini, '应用分类删除,正确', 'id', r.json()['data'])        # 获取id写到[新增第三方应用,正确]的typeId中        self.cf.put_ini(self.case_paramt_ini, '新增第三方应用,正确', 'typeId', r.json()['data'])        # 获取id写到[查询第三方应用,正确]的typeId中        self.cf.put_ini(self.case_paramt_ini, '查询第三方应用,正确', 'typeId', r.json()['data'])        log.info('应用分类新增,正确')        time.sleep(1)    '''        应用分类查询,正确    '''    def test_app_classifi_query(self):        # 获取ini中用例        data = self.cf.getini_by_section(self.case_paramt_ini, '应用分类查询,正确')        data1 = json.dumps(json.loads(str(data).replace("'","\"").replace('"null"','null').replace('"true"','true')))        get_parameter = dict_to_get_parameter(data)        url = 'http://' + self.url + '/sys/appType/list?' + get_parameter        token_yaml = sys.path[-1] + '/a_udaam/data/token.yaml'        token = read_yaml(token_yaml, 'token')        headers = {            'Content-Type': 'application/json',            'Authorization': 'Bearer ' + token        }        r = self.get(url, headers)        log.info(r.text)        self.assertEqual(r.json()['code'], 200)        self.assertEqual(r.json()['message'], '成功')        #获取新增分类时候的typeCode,typeCode,typeCode        insert_pid = self.cf.getini_by_option(self.case_paramt_ini, '应用分类新增,正确','pid')        insert_typecode = self.cf.getini_by_option(self.case_paramt_ini, '应用分类新增,正确', 'typeCode')        insert_typename = self.cf.getini_by_option(self.case_paramt_ini, '应用分类新增,正确', 'typeName')        self.assertEqual(r.json()['data']['content'][0]['pid'], insert_pid)        self.assertEqual(r.json()['data']['content'][0]['typeCode'], insert_typecode)        self.assertEqual(r.json()['data']['content'][0]['typeName'], insert_typename)        if self.url == '192.168.13.159:10041':            self.assertEqual(r.json()['data']['content'][0]['pName'], '测试分类czw')        else:            res = r.json()['code'] == 200 and r.json()['data']['content'][0]['pName'] == '数据共享发布'            case_section = '应用分类查询,正确'            url_path = '/sys/appType/list'            mail_title_url = 'http://' + self.url + url_path            request_method = 'get'            print(result_buginfo_template(case_section, url, request_method, data1, r))            title = mail_buginfo_template(case_section, mail_title_url, request_method, data1, r)[0]            content = mail_buginfo_template(case_section, mail_title_url, request_method, data1, r)[1]            bug_to_zentao(res, title, content.replace('\'','').replace('"',''), 'zhaop', 'xiaojc')            bug_id = from_zentaotitle_get_zentaoid(title)            title_mail = 'BUG #' + str(bug_id) + ' ' + title            mail_temp = bug_mail_template(str(bug_id), title, content, ['code='+str(r.json()['code']),r.json()['data']['content'][0]['pName']], ['code=200','数据共享发布'],                                          new_time().split(' ')[0], new_time().split(' ')[1], '禅道管理')            if res == False:                send_email('liny@casking.com.cn', title_mail, mail_temp)            self.assertTrue(res)        log.info('应用分类查询,正确')        time.sleep(1)    '''                应用分类修改,正确    '''    def test_app_classifi_update(self):        # 获取当前时间        get_times = get_time()        dangqian_time = get_times        timeArray1 = time.localtime(dangqian_time / 1000)        checkpoint1 = time.strftime("%Y-%m-%d %H:%M:%S", timeArray1)        # 获取以后时间        yihou_time = get_times + 1000000000        timeArray2 = time.localtime(yihou_time / 1000)        checkpoint2 = time.strftime("%Y-%m-%d %H:%M:%S", timeArray2)        # 将修改后的参数添加到ini文件的[厂商修改,正确]的参数中        self.cf.put_ini(self.case_paramt_ini, '应用分类修改,正确', 'typeName', str(get_time()))        self.cf.put_ini(self.case_paramt_ini, '应用分类修改,正确', 'typeCode', str(get_time()))        # 获取ini中用例        data = self.cf.getini_by_section(self.case_paramt_ini, '应用分类修改,正确')        data1 = str(data).replace("'", "\"").replace('"null"', 'null').replace('"true"', 'true')        get_parameter = dict_to_get_parameter(data)        url = 'http://' + self.url + '/sys/appType/manage/update'        token_yaml = sys.path[-1] + '/a_udaam/data/token.yaml'        token = read_yaml(token_yaml, 'token')        headers = {            'Content-Type': 'application/json',            'Authorization': 'Bearer ' + token        }        r = self.post(url, data1, headers)        log.info(r.text)        res = r.json()['code'] == 200        case_section = '应用分类修改,正确'        url_path = '/sys/appType/manage/update'        mail_title_url = 'http://' + self.url + url_path        request_method = 'post'        print(result_buginfo_template(case_section, url, request_method, data1, r))        title = mail_buginfo_template(case_section, mail_title_url, request_method, data1, r)[0]        content = mail_buginfo_template(case_section, mail_title_url, request_method, data1, r)[1]        bug_to_zentao(res, title, content.replace('\'','').replace('"',''), 'zhaop', 'xiaojc')        bug_id = from_zentaotitle_get_zentaoid(title)        title_mail = 'BUG #' + str(bug_id) + ' ' + title        mail_temp = bug_mail_template(str(bug_id), title, content,                                      ['code='+str(r.json()['code'])], ['code=200'],                                      new_time().split(' ')[0], new_time().split(' ')[1], '禅道管理')        if res == False:            send_email('liny@casking.com.cn', title_mail, mail_temp)        self.assertEqual(r.json()['code'], 200)        self.assertEqual(r.json()['message'], '成功')        log.info('应用分类修改,正确')        time.sleep(1)    '''                 应用分类删除,正确    '''    def test_app_classifi_delete(self):        token_yaml = sys.path[-1] + '/a_udaam/data/token.yaml'        token = read_yaml(token_yaml, 'token')        # 获取ini中用例        get_parameter = self.cf.getini_by_option(self.case_paramt_ini, '应用分类删除,正确', 'id')        url = 'http://' + self.url + '/sys/appType/page/delete/' + get_parameter        headers = {            'Content-Type': 'application/json',            'Authorization': 'Bearer ' + token        }        r = self.post(url,{}, headers)        log.info(r.text)        res = r.json()['code'] == 200        case_section = '应用分类删除,正确'        url_path = '/sys/appType/page/delete/'        mail_title_url = 'http://' + self.url + url_path        request_method = 'post'        print(result_buginfo_template(case_section, url, request_method, get_parameter, r))        title = mail_buginfo_template(case_section, mail_title_url, request_method, get_parameter, r)[0]        content = mail_buginfo_template(case_section, mail_title_url, request_method, get_parameter, r)[1]        bug_to_zentao(res, title, content.replace('\'','').replace('"',''), 'zhaop', 'xiaojc')        bug_id = from_zentaotitle_get_zentaoid(title)        title_mail = 'BUG #' + str(bug_id) + ' ' + title        mail_temp = bug_mail_template(str(bug_id), title, content,                                      ['code='+str(r.json()['code'])], ['code=200'],                                      new_time().split(' ')[0], new_time().split(' ')[1], '禅道管理')        if res == False:            send_email('xiaojc@casking.com.cn', title_mail, mail_temp)        self.assertEqual(r.json()['code'], 200)        self.assertEqual(r.json()['message'], '成功')        log.info('应用分类删除,正确')        time.sleep(1)        if r.json()['code'] != '200':            # 获取ini中用例            data = self.cf.getini_by_option(self.case_paramt_ini, '应用分类删除,正确', 'id')            print(data)            sql = "delete from tb_system_type where id=" + "'" + data + "'"            print(sql)            connect = ConnectMysql()            results = connect.change_data(sql)            log.info('应用分类删除,正确')            time.sleep(1)        else:            pass